// Copyright (C) Polytope Labs Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
pragma solidity 0.8.20;

import "forge-std/Test.sol";
import {SP1Verifier} from "@sp1-contracts/v2.0.0/SP1VerifierPlonk.sol";
import {ISP1Verifier} from "@sp1-contracts/ISP1Verifier.sol";

import "../src/consensus/SP1Beefy.sol";


contract SP1BeefyTest is Test {
    SP1Verifier internal sp1;

    function setUp() public virtual {
        sp1 = new SP1Verifier();
    }

    function testAbiDecode() public view {
        bytes memory encoded = hex"000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000310cbe86c2e83df0485b955c5256bff94b7965c0f43bd9811e4b341b446327c16e1f0a0000000000000000000000000000000000000000000000000000000000001531000000000000000000000000000000000000000000000000000000000000006a64725c2155b3f34735784f8b5c3d5abca864c783d096392f554e8d6c8946f7ec6f9eb3cc23fbc3203e96ca4512ba436b29c558dd1753121ffe291a86d44c06be0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000048000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000310cbf0000000000000000000000000000000000000000000000000000000000001530000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000206d6800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000020b31a08f0ae92fc03dcf293c50c4fb2513db489a0cef98b9948f335ce7f224101000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000fa90000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000012b2eae2e94411b542c31d2a30ac8aef257b847980b534d8a3e657591123f3f255c1621730070114e3c5a4e9e4c4846898a030f9b4d71e7fb5db25d4584615ba9937842d33cc0a3890454e4165725259146ce0bdda858a108185f7e7bce34c5853a4f873504100661757261205d4c2a11000000000452505352907854ae6e33c8a823f16b63b14fe6a67605d2f9709abd95e9c7d149619dfa5033ee32c4000449534d500101fe0f35375d4021830c06de9af4a967660f80c08647cad2fe725368b8cdaabb5f5be5840a59f08c4f65abfbfd9db89555e6d24919ae1a7a2942e5e9248b4773630561757261010110436ffe09b3e9f7471ba500693fc4497963acb5181670dd4261b8f96c97271bef44902868ae226f8de7d7e6c66e18bcf1e5d21e1e5c5074fbb81f9c46d61e8100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003644aca240a215464a0af84534353c93faa8a9b591dff6688788d2bbc2320e25bb7718b80cd278dbee5d19542ef79c3a7d7e25fc4342165b5c7bfdf84834814c3928577adbb0d4f58cdfae0da550d31e1fb6d6074ff687c8552330f2c7767247c9f0dd233691a11ecf927ece287fbb9cb5dca5286fce02575107722016406493e8771ec1baf188dd29d76a021973c45101822cfe2ff14e23c712d917b19ce0000423c5adfb421c735ce4709981de6ec42de4d30f5a0808bea52d921189e887e8f6f92c2eadb0d66fd26ec268d3ec181eb8743fbe16f4e995385d0ada885ba60c189888590b00c01862b7ece5491cf739934a0a714edf8b64f919b6cd3bd67019871db4f7da127c7b4ff412d9011238c0956b8a4fd403e702dc63b24018463bc451c5ad5177227d0bfdfb441f52bcf67c663df88f402e7a69623eda318be9de51495ca028a2419630d93edfe3ed34abc8306b6603013a12eac3352b391ae09cce664079aec10061d8b3cacc87603b040f2ff2d11d79457e438063a9cc1ddea4bb7bf8458e697221205f11e43344e19941a426cbff5c30ce1699baacbc2ea84fcc8e7554b05d22f2e74048a7d73f2fcbe2aced88eb74ed0d6d2a8082f137d7a13fb89cedf02ff050438c78381df0a4427dbb71709e0f6daa412276810eca6dc39c68a61cdeed810becc4939a1a6f5039e487e2086c15924bc48285bfb30fff90c11c98596324f1f029b4af2aba10c147149e02eca864991c03d4b473e1a279f97b34a5dd4b7d51871edbfcd3aaf29c8d2c708c82059de762f2b7d58c786e0847d219408e6ac7405aff54cb08ed32aabb0014c679346f7f9b7e18fcc41ef4c2e38814eef8b999f11b53ca21fcbd0c483ffbc59b959b0d5d843198f4d78610ee52ebafe9407351619ff3292af86243883fb3dec256536449ed489825b954f35edfeda1ceb9cb3ac1f1345a843001cb52a3ecde7cd8620af2561e7791a9a0cbda607c047098c08e42ccdcb3eb78a94444e2653cd683e590be37c4450fa90e9f940136f7351aa60ae1251025df1e285994ae83a9ffc1dd98826cd99f8264c38eca1dd4c3d0c58e816058bad9e2f9b3cb4101ecdd149513ae1130b2cf75e59898fe1cda62cd404bf1e07d82f4fcceb6f50fbefa6656a18c558a02d084b6b6977164ffb767d0751031c020887bee47942ea60cc14dd5a8d63ccc8240f872880458a6f2683a29f5bade200000000000000000000000000000000000000000000000000000000";

        // abi.decode(encoded, (Commitment, BeefyMmrLeaf, ParachainHeader[], bytes));

    }

    function testPolkadotVerifier() public view {
        bytes
            memory proof = hex"4aca240a2f0bf9b6c922d4c57353e59a29634035217467e193e91eadb17f3a7b7a91a3291967b4aa263ba370a0830e0d9da34e7987f60622558069d9731095937ce8f041260474e34c9abd180f2fa8f988317928ba13e25d79e268977a0cfd116cd0c3f125ab28ed01834d191fc41164f692b5c91a638cef79ad034a96c2c2890e3ac2e11b9d64740c81b0219bba352ffc494cc5f9944910e56e4dbda1850c53a205571c1c8c624fe4aacaf428a5ed186e1a464d35a92b680177bb2cb0207c49eb866a170203307dafc76f0405b1ab43127c2762cd86e85b8825e227a3723e732cfd96f100a9b0690e5338e1231e062fd23960ce080bcf0d46f5bc5c7e457d979346fa4b2d9b69f5683dd9360d9d10a51871361030d9ff02016fcde7bcb1c0a9db8378a62fb85bdb183ecdbc692e0f099a92de0b11fceffdc1f438277d8cf11d5106b13f22fee6270c1530177e8ccc0953be5e76cfb4c3e33a885e8e8dc103f89159775b1b5e5b93cabdc7481968b7decd981f5fa60651f678b2cb2df6b51d15ca24dda82516f906a72ec8353f4f49d806b102fecd2afc85102cc31bc8c6a3799233521222e7d8d862bfac8293c98c2f09de923669c3228bf4e15e50546114b6a0e96d210e05ef7f03696d7299af003f7957554abc93f6c162beaadf81adefacbfec391723d2bf77d1dceee0999aa52757540d63297026b8b3d9c41aeeac0349bf4d7bcf2592621d5a92792f5297872fc8bc1114019a59e1b0f9e03ae9cb78d06ed5063c21dd10ec61794d01a2faed5be9a80bd60174175f2ae009e92910aadb56ebe3e0087a0d2572f0e414b32f14ac9ddfe2e1b81bfb5ab16270b893017878081db7420116da1d4fd8b8d1abc2421f735ff3304fb025f9b316100d8f7fd93940c072da19cff581ca5a32b8d306284ff4d7f94bcecaba41d241ae0791ae8d1a30557d4315f58c0b4a3aae6d14323d57c225f1c2cc00232d71cb3dbab1f7f56123e253f12f9736d8d77978525b999ea60ff8cb58ab0ca9b9f952f606199e70b6ab7041bf1492c0f8424be9339a510736d417aa2f5b08282fdd247b2832d0ad53c9c58be3050e864347f375ea621d43895b79a54f46a5deb14c961402dc8d22114adb4d3e207b70aea83e63dd641188ddf276225c7ca08b80e99957e4e829a5f979f07d28266de9dcaec71fc71787348e514a2d17048ed1517fd88a4eb125dfb07f6194b7";

        bytes memory publicInputs =             hex"000000000000000000000000000000000000000000000000000000000000002067f3dc54dc343f46a92d13212d585f81026cf15b4e3ed44f32b4677e2c44742c000000000000000000000000000000000000000000000000000000000000019053e540e08e5aea29dddd9bdef3e31930a713d9e0e2da97eb4a319dff0bff4b15000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000019b99dd7a3a537811a27a58712d443203d0d57211e04a07966be9d8f174d2d654";

        bytes32 verificationKey = bytes32(0x00b3830a7bcbd368596446801391435c29bb5319827319de0acb83fb7490ef49);

        ISP1Verifier(address(sp1)).verifyProof(verificationKey, publicInputs, proof);

        PublicInputs memory inputs = abi.decode(publicInputs, (PublicInputs));

        console.log("authority: ");
        console.logBytes32(inputs.authorities_root);

        console.log("MMR Leaf: ");
        console.logBytes32(inputs.leaf_hash);

        console.log("authority length: ");
        console.log(inputs.authorities_len);
    }
}

// Copyright (C) Polytope Labs Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
pragma solidity 0.8.20;

import "forge-std/Test.sol";
import {SP1Verifier} from "@sp1-contracts/v2.0.0/SP1VerifierPlonk.sol";
import {ISP1Verifier} from "@sp1-contracts/ISP1Verifier.sol";

import "../src/consensus/SP1Beefy.sol";

contract SP1BeefyTest is Test {
    SP1Verifier internal sp1;

    function setUp() public virtual {
        sp1 = new SP1Verifier();
    }

    function testAbiDecode() public {
        bytes
            memory encoded = hex"0000000000000000000000000000000000000000000000000000000000310cbf000000000000000000000000000000000000000000000000000000000000153000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000310cbe86c2e83df0485b955c5256bff94b7965c0f43bd9811e4b341b446327c16e1f0a0000000000000000000000000000000000000000000000000000000000001531000000000000000000000000000000000000000000000000000000000000006a64725c2155b3f34735784f8b5c3d5abca864c783d096392f554e8d6c8946f7ec6f9eb3cc23fbc3203e96ca4512ba436b29c558dd1753121ffe291a86d44c06be00000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000340000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000fa90000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000012b2eae2e94411b542c31d2a30ac8aef257b847980b534d8a3e657591123f3f255c1621730070114e3c5a4e9e4c4846898a030f9b4d71e7fb5db25d4584615ba9937842d33cc0a3890454e4165725259146ce0bdda858a108185f7e7bce34c5853a4f873504100661757261205d4c2a11000000000452505352907854ae6e33c8a823f16b63b14fe6a67605d2f9709abd95e9c7d149619dfa5033ee32c4000449534d500101fe0f35375d4021830c06de9af4a967660f80c08647cad2fe725368b8cdaabb5f5be5840a59f08c4f65abfbfd9db89555e6d24919ae1a7a2942e5e9248b4773630561757261010110436ffe09b3e9f7471ba500693fc4497963acb5181670dd4261b8f96c97271bef44902868ae226f8de7d7e6c66e18bcf1e5d21e1e5c5074fbb81f9c46d61e8100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003644aca240a06bb04b67ec80992f3b7f39d7d6446de10360e22280e234ec004237f883893520587a8b4a290214c8eb4abf115e353447365b59c5ebe0e2e643debae5fbca3a1247439d784cf211b3dd161ec16277ce02fe655e26d6464115e2f4bc367756d640ebc1fd1901df779e74907c1a05c250161dd777bd1ff9680c69778eafb7d7b7b1d2c06e54be4bacb0e5c3409c46f7dc69db4ce89ebaa1ddfa0aeadbf82e2e2620877a78d0e4550202d47b7ba01ed447b6d0db4b47eeb54c1e26c603adde31a43097522eca8f7d190112c032b058e59e1a52d7a532aab5f8bdf6b5321a083a673258eeff903167d673f4c917be9c1e07fd0514bec61eb98133b7da694cdc5d85404acda8a3afe56dbc9bf0c4dc88b4b9e266b11fb86364777579c55b476f4bf2303ed3092a032d4afb3b7dac74d1b91e5a0c04d94c53945cd1ffe1afb0ceb325c0610fd90b8faf27db7318bd81dae9d13021e5cbbfdf3e4e7cb2eca9f6d933702235dc52ab127beb50141e4ea0ecb0e64dcbeb8628af7aa4617ae6728c1d22f1b10c7ec0f6f02dae4eac2ce6f7281e6b84bb1007c353d274aa585ad83cdb5615619a9fbbdc73179bc0e1dfbb5a46fd0c73ff75ba6a79360c77ea437b637535dd52f26a5aa3a3859f031f578f654430c3a56cbdd114225af2f831a30583d040620017882bb3a81fac038e54961e2723ae96e3b619fb845832c3b27f35cebf3c498138486b53c0ca7003ac1ec43ef1f08d41d4a2c27fc92b70fab81a092575e80322816141b8460fd45eff96d29d7f846ca85ebdb9db22001aad67f897b08b78bce28d2297aa54d9aa1f2540495fe1845355b5f9c93f87d06a09799a9c0b0698d502ebed18f5c0f1deed1071190e04a01ade15a2f138868b9157852e97691672fdd1ef7a2beefe3e01f0af6d4502df8bc2a85d22effb19a95f9cc6bc02e08cca747059fe86b1d1e5e0680a551dde177c2d309ee2c0b48fda33fae8e864733e1c1742d6cc0273f468c28716061a0d6377db5387f186ad10f506a10953d4034dcaf382f10af22d9ed7a61d7dc2dcc5bc721925adab460a63b6417eab254b85fc9a6c31d66950781f5a57f6ed41bdae597f58f3185dd859d716f0737e52d92c5d795351deea15024e68c68041d95d8c0ce2991ff61e2514d95d4801dd0662b69ca685b1e73c4ccd10b4570006a7e04628e15b4c7937e23b0837263bd974daf4324d82500000000000000000000000000000000000000000000000000000000";

        BeefyConsensusState memory state = BeefyConsensusState({
            latestHeight: 0,
            beefyActivationBlock: 0,
            currentAuthoritySet: AuthoritySetCommitment({
                id: 5423,
                len: 105,
                root: bytes32(0x2d16479fd12f5a3059db7b33a7665c3382eb9911e897a71278029db686252195)
            }),
            nextAuthoritySet: AuthoritySetCommitment({
                id: 5424,
                len: 106,
                root: bytes32(0x64725c2155b3f34735784f8b5c3d5abca864c783d096392f554e8d6c8946f7ec)
            })
        });

        SP1Beefy sp1Beefy = new SP1Beefy(sp1);
        sp1Beefy.verifyConsensus(abi.encode(state), encoded);

        (
            MiniCommitment memory commitment,
            PartialBeefyMmrLeaf memory leaf,
            ParachainHeader[] memory headers,
            bytes memory plonkProof
        ) = abi.decode(encoded, (MiniCommitment, PartialBeefyMmrLeaf, ParachainHeader[], bytes));

        console.logBytes(headers[0].header);
    }

    function testPolkadotVerifier() public view {
        bytes
            memory proof = hex"4aca240a2f0bf9b6c922d4c57353e59a29634035217467e193e91eadb17f3a7b7a91a3291967b4aa263ba370a0830e0d9da34e7987f60622558069d9731095937ce8f041260474e34c9abd180f2fa8f988317928ba13e25d79e268977a0cfd116cd0c3f125ab28ed01834d191fc41164f692b5c91a638cef79ad034a96c2c2890e3ac2e11b9d64740c81b0219bba352ffc494cc5f9944910e56e4dbda1850c53a205571c1c8c624fe4aacaf428a5ed186e1a464d35a92b680177bb2cb0207c49eb866a170203307dafc76f0405b1ab43127c2762cd86e85b8825e227a3723e732cfd96f100a9b0690e5338e1231e062fd23960ce080bcf0d46f5bc5c7e457d979346fa4b2d9b69f5683dd9360d9d10a51871361030d9ff02016fcde7bcb1c0a9db8378a62fb85bdb183ecdbc692e0f099a92de0b11fceffdc1f438277d8cf11d5106b13f22fee6270c1530177e8ccc0953be5e76cfb4c3e33a885e8e8dc103f89159775b1b5e5b93cabdc7481968b7decd981f5fa60651f678b2cb2df6b51d15ca24dda82516f906a72ec8353f4f49d806b102fecd2afc85102cc31bc8c6a3799233521222e7d8d862bfac8293c98c2f09de923669c3228bf4e15e50546114b6a0e96d210e05ef7f03696d7299af003f7957554abc93f6c162beaadf81adefacbfec391723d2bf77d1dceee0999aa52757540d63297026b8b3d9c41aeeac0349bf4d7bcf2592621d5a92792f5297872fc8bc1114019a59e1b0f9e03ae9cb78d06ed5063c21dd10ec61794d01a2faed5be9a80bd60174175f2ae009e92910aadb56ebe3e0087a0d2572f0e414b32f14ac9ddfe2e1b81bfb5ab16270b893017878081db7420116da1d4fd8b8d1abc2421f735ff3304fb025f9b316100d8f7fd93940c072da19cff581ca5a32b8d306284ff4d7f94bcecaba41d241ae0791ae8d1a30557d4315f58c0b4a3aae6d14323d57c225f1c2cc00232d71cb3dbab1f7f56123e253f12f9736d8d77978525b999ea60ff8cb58ab0ca9b9f952f606199e70b6ab7041bf1492c0f8424be9339a510736d417aa2f5b08282fdd247b2832d0ad53c9c58be3050e864347f375ea621d43895b79a54f46a5deb14c961402dc8d22114adb4d3e207b70aea83e63dd641188ddf276225c7ca08b80e99957e4e829a5f979f07d28266de9dcaec71fc71787348e514a2d17048ed1517fd88a4eb125dfb07f6194b7";

        bytes
            memory publicInputs = hex"000000000000000000000000000000000000000000000000000000000000002067f3dc54dc343f46a92d13212d585f81026cf15b4e3ed44f32b4677e2c44742c000000000000000000000000000000000000000000000000000000000000019053e540e08e5aea29dddd9bdef3e31930a713d9e0e2da97eb4a319dff0bff4b15000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000019b99dd7a3a537811a27a58712d443203d0d57211e04a07966be9d8f174d2d654";

        bytes32 verificationKey = bytes32(0x00b3830a7bcbd368596446801391435c29bb5319827319de0acb83fb7490ef49);

        ISP1Verifier(address(sp1)).verifyProof(verificationKey, publicInputs, proof);

        PublicInputs memory inputs = abi.decode(publicInputs, (PublicInputs));

        console.log("authority: ");
        console.logBytes32(inputs.authorities_root);

        console.log("MMR Leaf: ");
        console.logBytes32(inputs.leaf_hash);

        console.log("authority length: ");
        console.log(inputs.authorities_len);
    }
}

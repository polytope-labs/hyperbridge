// Code generated by Prisma Client Rust. DO NOT EDIT

pub static DATAMODEL_STR: &'static str = include_str!("../prisma/schema.prisma");
static DATABASE_STR: &'static str = "sqlite";
use ::prisma_client_rust::migrations::include_dir;
pub static MIGRATIONS_DIR: &::prisma_client_rust::migrations::include_dir::Dir = &::prisma_client_rust::migrations::include_dir::include_dir!(
	"$CARGO_MANIFEST_DIR/prisma/migrations"
);
pub async fn new_client() -> Result<PrismaClient, ::prisma_client_rust::NewClientError> {
	PrismaClient::_builder().build().await
}
pub async fn new_client_with_url(
	url: &str,
) -> Result<PrismaClient, ::prisma_client_rust::NewClientError> {
	PrismaClient::_builder().with_url(url.to_string()).build().await
}
pub mod deliveries {
	use super::{_prisma::*, *};
	pub const NAME: &str = "Deliveries";
	pub mod id {
		use super::{
			super::*, OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam,
			WithParam, _prisma::*,
		};
		pub const NAME: &str = "id";
		pub struct Set(pub i32);
		impl From<Set> for SetParam {
			fn from(Set(v): Set) -> Self {
				Self::SetId(v)
			}
		}
		impl From<Set> for UncheckedSetParam {
			fn from(Set(v): Set) -> Self {
				Self::Id(v)
			}
		}
		pub fn set<T: From<Set>>(value: i32) -> T {
			Set(value).into()
		}
		pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
			OrderByParam::Id(direction)
		}
		pub fn equals<T: From<UniqueWhereParam>>(value: i32) -> T {
			UniqueWhereParam::IdEquals(value).into()
		}
		::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Id, {
			fn in_vec(_: Vec<i32>) -> InVec;
			fn not_in_vec(_: Vec<i32>) -> NotInVec;
			fn lt(_: i32) -> Lt;
			fn lte(_: i32) -> Lte;
			fn gt(_: i32) -> Gt;
			fn gte(_: i32) -> Gte;
			fn not(_: i32) -> Not;
		});
		pub fn increment(value: i32) -> SetParam {
			SetParam::IncrementId(value)
		}
		pub fn decrement(value: i32) -> SetParam {
			SetParam::DecrementId(value)
		}
		pub fn multiply(value: i32) -> SetParam {
			SetParam::MultiplyId(value)
		}
		pub fn divide(value: i32) -> SetParam {
			SetParam::DivideId(value)
		}
		pub struct Include;
		impl Into<super::IncludeParam> for Include {
			fn into(self) -> super::IncludeParam {
				super::IncludeParam::Id(self)
			}
		}
		impl Include {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
		pub struct Select;
		impl Into<super::SelectParam> for Select {
			fn into(self) -> super::SelectParam {
				super::SelectParam::Id(self)
			}
		}
		impl Select {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
	}
	pub mod hash {
		use super::{
			super::*, OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam,
			WithParam, _prisma::*,
		};
		pub const NAME: &str = "hash";
		pub struct Set(pub String);
		impl From<Set> for SetParam {
			fn from(Set(v): Set) -> Self {
				Self::SetHash(v)
			}
		}
		impl From<Set> for UncheckedSetParam {
			fn from(Set(v): Set) -> Self {
				Self::Hash(v)
			}
		}
		pub fn set<T: From<Set>>(value: String) -> T {
			Set(value).into()
		}
		pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
			OrderByParam::Hash(direction)
		}
		pub fn equals(value: String) -> WhereParam {
			WhereParam::Hash(_prisma::read_filters::StringFilter::Equals(value))
		}
		::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::StringFilter, Hash, {
			fn in_vec(_: Vec<String>) -> InVec;
			fn not_in_vec(_: Vec<String>) -> NotInVec;
			fn lt(_: String) -> Lt;
			fn lte(_: String) -> Lte;
			fn gt(_: String) -> Gt;
			fn gte(_: String) -> Gte;
			fn contains(_: String) -> Contains;
			fn starts_with(_: String) -> StartsWith;
			fn ends_with(_: String) -> EndsWith;
			fn not(_: String) -> Not;
		});
		pub struct Include;
		impl Into<super::IncludeParam> for Include {
			fn into(self) -> super::IncludeParam {
				super::IncludeParam::Hash(self)
			}
		}
		impl Include {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
		pub struct Select;
		impl Into<super::SelectParam> for Select {
			fn into(self) -> super::SelectParam {
				super::SelectParam::Hash(self)
			}
		}
		impl Select {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
	}
	pub mod source_chain {
		use super::{
			super::*, OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam,
			WithParam, _prisma::*,
		};
		pub const NAME: &str = "source_chain";
		pub struct Set(pub String);
		impl From<Set> for SetParam {
			fn from(Set(v): Set) -> Self {
				Self::SetSourceChain(v)
			}
		}
		impl From<Set> for UncheckedSetParam {
			fn from(Set(v): Set) -> Self {
				Self::SourceChain(v)
			}
		}
		pub fn set<T: From<Set>>(value: String) -> T {
			Set(value).into()
		}
		pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
			OrderByParam::SourceChain(direction)
		}
		pub fn equals(value: String) -> WhereParam {
			WhereParam::SourceChain(_prisma::read_filters::StringFilter::Equals(value))
		}
		::prisma_client_rust::scalar_where_param_fns!(
			_prisma::read_filters::StringFilter,
			SourceChain,
			{
				fn in_vec(_: Vec<String>) -> InVec;
				fn not_in_vec(_: Vec<String>) -> NotInVec;
				fn lt(_: String) -> Lt;
				fn lte(_: String) -> Lte;
				fn gt(_: String) -> Gt;
				fn gte(_: String) -> Gte;
				fn contains(_: String) -> Contains;
				fn starts_with(_: String) -> StartsWith;
				fn ends_with(_: String) -> EndsWith;
				fn not(_: String) -> Not;
			}
		);
		pub struct Include;
		impl Into<super::IncludeParam> for Include {
			fn into(self) -> super::IncludeParam {
				super::IncludeParam::SourceChain(self)
			}
		}
		impl Include {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
		pub struct Select;
		impl Into<super::SelectParam> for Select {
			fn into(self) -> super::SelectParam {
				super::SelectParam::SourceChain(self)
			}
		}
		impl Select {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
	}
	pub mod dest_chain {
		use super::{
			super::*, OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam,
			WithParam, _prisma::*,
		};
		pub const NAME: &str = "dest_chain";
		pub struct Set(pub String);
		impl From<Set> for SetParam {
			fn from(Set(v): Set) -> Self {
				Self::SetDestChain(v)
			}
		}
		impl From<Set> for UncheckedSetParam {
			fn from(Set(v): Set) -> Self {
				Self::DestChain(v)
			}
		}
		pub fn set<T: From<Set>>(value: String) -> T {
			Set(value).into()
		}
		pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
			OrderByParam::DestChain(direction)
		}
		pub fn equals(value: String) -> WhereParam {
			WhereParam::DestChain(_prisma::read_filters::StringFilter::Equals(value))
		}
		::prisma_client_rust::scalar_where_param_fns!(
			_prisma::read_filters::StringFilter,
			DestChain,
			{
				fn in_vec(_: Vec<String>) -> InVec;
				fn not_in_vec(_: Vec<String>) -> NotInVec;
				fn lt(_: String) -> Lt;
				fn lte(_: String) -> Lte;
				fn gt(_: String) -> Gt;
				fn gte(_: String) -> Gte;
				fn contains(_: String) -> Contains;
				fn starts_with(_: String) -> StartsWith;
				fn ends_with(_: String) -> EndsWith;
				fn not(_: String) -> Not;
			}
		);
		pub struct Include;
		impl Into<super::IncludeParam> for Include {
			fn into(self) -> super::IncludeParam {
				super::IncludeParam::DestChain(self)
			}
		}
		impl Include {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
		pub struct Select;
		impl Into<super::SelectParam> for Select {
			fn into(self) -> super::SelectParam {
				super::SelectParam::DestChain(self)
			}
		}
		impl Select {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
	}
	pub mod delivery_type {
		use super::{
			super::*, OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam,
			WithParam, _prisma::*,
		};
		pub const NAME: &str = "delivery_type";
		pub struct Set(pub i32);
		impl From<Set> for SetParam {
			fn from(Set(v): Set) -> Self {
				Self::SetDeliveryType(v)
			}
		}
		impl From<Set> for UncheckedSetParam {
			fn from(Set(v): Set) -> Self {
				Self::DeliveryType(v)
			}
		}
		pub fn set<T: From<Set>>(value: i32) -> T {
			Set(value).into()
		}
		pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
			OrderByParam::DeliveryType(direction)
		}
		pub fn equals(value: i32) -> WhereParam {
			WhereParam::DeliveryType(_prisma::read_filters::IntFilter::Equals(value))
		}
		::prisma_client_rust::scalar_where_param_fns!(
			_prisma::read_filters::IntFilter,
			DeliveryType,
			{
				fn in_vec(_: Vec<i32>) -> InVec;
				fn not_in_vec(_: Vec<i32>) -> NotInVec;
				fn lt(_: i32) -> Lt;
				fn lte(_: i32) -> Lte;
				fn gt(_: i32) -> Gt;
				fn gte(_: i32) -> Gte;
				fn not(_: i32) -> Not;
			}
		);
		pub fn increment(value: i32) -> SetParam {
			SetParam::IncrementDeliveryType(value)
		}
		pub fn decrement(value: i32) -> SetParam {
			SetParam::DecrementDeliveryType(value)
		}
		pub fn multiply(value: i32) -> SetParam {
			SetParam::MultiplyDeliveryType(value)
		}
		pub fn divide(value: i32) -> SetParam {
			SetParam::DivideDeliveryType(value)
		}
		pub struct Include;
		impl Into<super::IncludeParam> for Include {
			fn into(self) -> super::IncludeParam {
				super::IncludeParam::DeliveryType(self)
			}
		}
		impl Include {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
		pub struct Select;
		impl Into<super::SelectParam> for Select {
			fn into(self) -> super::SelectParam {
				super::SelectParam::DeliveryType(self)
			}
		}
		impl Select {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
	}
	pub mod created_at {
		use super::{
			super::*, OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam,
			WithParam, _prisma::*,
		};
		pub const NAME: &str = "created_at";
		pub struct Set(pub i32);
		impl From<Set> for SetParam {
			fn from(Set(v): Set) -> Self {
				Self::SetCreatedAt(v)
			}
		}
		impl From<Set> for UncheckedSetParam {
			fn from(Set(v): Set) -> Self {
				Self::CreatedAt(v)
			}
		}
		pub fn set<T: From<Set>>(value: i32) -> T {
			Set(value).into()
		}
		pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
			OrderByParam::CreatedAt(direction)
		}
		pub fn equals(value: i32) -> WhereParam {
			WhereParam::CreatedAt(_prisma::read_filters::IntFilter::Equals(value))
		}
		::prisma_client_rust::scalar_where_param_fns!(
			_prisma::read_filters::IntFilter,
			CreatedAt,
			{
				fn in_vec(_: Vec<i32>) -> InVec;
				fn not_in_vec(_: Vec<i32>) -> NotInVec;
				fn lt(_: i32) -> Lt;
				fn lte(_: i32) -> Lte;
				fn gt(_: i32) -> Gt;
				fn gte(_: i32) -> Gte;
				fn not(_: i32) -> Not;
			}
		);
		pub fn increment(value: i32) -> SetParam {
			SetParam::IncrementCreatedAt(value)
		}
		pub fn decrement(value: i32) -> SetParam {
			SetParam::DecrementCreatedAt(value)
		}
		pub fn multiply(value: i32) -> SetParam {
			SetParam::MultiplyCreatedAt(value)
		}
		pub fn divide(value: i32) -> SetParam {
			SetParam::DivideCreatedAt(value)
		}
		pub struct Include;
		impl Into<super::IncludeParam> for Include {
			fn into(self) -> super::IncludeParam {
				super::IncludeParam::CreatedAt(self)
			}
		}
		impl Include {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
		pub struct Select;
		impl Into<super::SelectParam> for Select {
			fn into(self) -> super::SelectParam {
				super::SelectParam::CreatedAt(self)
			}
		}
		impl Select {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
	}
	pub mod height {
		use super::{
			super::*, OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam,
			WithParam, _prisma::*,
		};
		pub const NAME: &str = "height";
		pub struct Set(pub i32);
		impl From<Set> for SetParam {
			fn from(Set(v): Set) -> Self {
				Self::SetHeight(v)
			}
		}
		impl From<Set> for UncheckedSetParam {
			fn from(Set(v): Set) -> Self {
				Self::Height(v)
			}
		}
		pub fn set<T: From<Set>>(value: i32) -> T {
			Set(value).into()
		}
		pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
			OrderByParam::Height(direction)
		}
		pub fn equals(value: i32) -> WhereParam {
			WhereParam::Height(_prisma::read_filters::IntFilter::Equals(value))
		}
		::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Height, {
			fn in_vec(_: Vec<i32>) -> InVec;
			fn not_in_vec(_: Vec<i32>) -> NotInVec;
			fn lt(_: i32) -> Lt;
			fn lte(_: i32) -> Lte;
			fn gt(_: i32) -> Gt;
			fn gte(_: i32) -> Gte;
			fn not(_: i32) -> Not;
		});
		pub fn increment(value: i32) -> SetParam {
			SetParam::IncrementHeight(value)
		}
		pub fn decrement(value: i32) -> SetParam {
			SetParam::DecrementHeight(value)
		}
		pub fn multiply(value: i32) -> SetParam {
			SetParam::MultiplyHeight(value)
		}
		pub fn divide(value: i32) -> SetParam {
			SetParam::DivideHeight(value)
		}
		pub struct Include;
		impl Into<super::IncludeParam> for Include {
			fn into(self) -> super::IncludeParam {
				super::IncludeParam::Height(self)
			}
		}
		impl Include {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
		pub struct Select;
		impl Into<super::SelectParam> for Select {
			fn into(self) -> super::SelectParam {
				super::SelectParam::Height(self)
			}
		}
		impl Select {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
	}
	pub fn create(
		hash: String,
		source_chain: String,
		dest_chain: String,
		delivery_type: i32,
		created_at: i32,
		height: i32,
		_params: Vec<SetParam>,
	) -> (String, String, String, i32, i32, i32, Vec<SetParam>) {
		(hash, source_chain, dest_chain, delivery_type, created_at, height, _params)
	}
	pub fn create_unchecked(
		hash: String,
		source_chain: String,
		dest_chain: String,
		delivery_type: i32,
		created_at: i32,
		height: i32,
		_params: Vec<SetParam>,
	) -> (String, String, String, i32, i32, i32, Vec<SetParam>) {
		(hash, source_chain, dest_chain, delivery_type, created_at, height, _params)
	}
	#[macro_export]
	macro_rules ! _select_deliveries { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: deliveries :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: deliveries :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: deliveries :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: deliveries :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: deliveries :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: deliveries :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { id , hash , source_chain , dest_chain , delivery_type , created_at , height } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : crate :: prisma :: deliveries :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: deliveries :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: deliveries :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: deliveries :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: deliveries :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: deliveries :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "hash" , "source_chain" , "dest_chain" , "delivery_type" , "created_at" , "height"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: deliveries :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; id) => { i32 } ; (@ field_type ; hash) => { String } ; (@ field_type ; source_chain) => { String } ; (@ field_type ; dest_chain) => { String } ; (@ field_type ; delivery_type) => { i32 } ; (@ field_type ; created_at) => { i32 } ; (@ field_type ; height) => { i32 } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Deliveries" , available relations are "id, hash, source_chain, dest_chain, delivery_type, created_at, height")) } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; id) => { Into :: < crate :: prisma :: deliveries :: SelectParam > :: into (crate :: prisma :: deliveries :: id :: Select) } ; (@ selection_field_to_selection_param ; hash) => { Into :: < crate :: prisma :: deliveries :: SelectParam > :: into (crate :: prisma :: deliveries :: hash :: Select) } ; (@ selection_field_to_selection_param ; source_chain) => { Into :: < crate :: prisma :: deliveries :: SelectParam > :: into (crate :: prisma :: deliveries :: source_chain :: Select) } ; (@ selection_field_to_selection_param ; dest_chain) => { Into :: < crate :: prisma :: deliveries :: SelectParam > :: into (crate :: prisma :: deliveries :: dest_chain :: Select) } ; (@ selection_field_to_selection_param ; delivery_type) => { Into :: < crate :: prisma :: deliveries :: SelectParam > :: into (crate :: prisma :: deliveries :: delivery_type :: Select) } ; (@ selection_field_to_selection_param ; created_at) => { Into :: < crate :: prisma :: deliveries :: SelectParam > :: into (crate :: prisma :: deliveries :: created_at :: Select) } ; (@ selection_field_to_selection_param ; height) => { Into :: < crate :: prisma :: deliveries :: SelectParam > :: into (crate :: prisma :: deliveries :: height :: Select) } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: deliveries :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; hash) => { "hash" } ; (@ field_serde_name ; source_chain) => { "source_chain" } ; (@ field_serde_name ; dest_chain) => { "dest_chain" } ; (@ field_serde_name ; delivery_type) => { "delivery_type" } ; (@ field_serde_name ; created_at) => { "created_at" } ; (@ field_serde_name ; height) => { "height" } ; }
	pub use _select_deliveries as select;
	pub enum SelectParam {
		Id(id::Select),
		Hash(hash::Select),
		SourceChain(source_chain::Select),
		DestChain(dest_chain::Select),
		DeliveryType(delivery_type::Select),
		CreatedAt(created_at::Select),
		Height(height::Select),
	}
	impl SelectParam {
		pub fn to_selection(self) -> ::prisma_client_rust::Selection {
			match self {
				Self::Id(data) => data.to_selection(),
				Self::Hash(data) => data.to_selection(),
				Self::SourceChain(data) => data.to_selection(),
				Self::DestChain(data) => data.to_selection(),
				Self::DeliveryType(data) => data.to_selection(),
				Self::CreatedAt(data) => data.to_selection(),
				Self::Height(data) => data.to_selection(),
			}
		}
	}
	#[macro_export]
	macro_rules ! _include_deliveries { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: deliveries :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: deliveries :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: deliveries :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: deliveries :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: deliveries :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: deliveries :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: deliveries :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: deliveries :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub id : i32 , pub hash : String , pub source_chain : String , pub dest_chain : String , pub delivery_type : i32 , pub created_at : i32 , pub height : i32 , $ (pub $ field : crate :: prisma :: deliveries :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (id) , stringify ! (hash) , stringify ! (source_chain) , stringify ! (dest_chain) , stringify ! (delivery_type) , stringify ! (created_at) , stringify ! (height)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: deliveries :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: deliveries :: id :: NAME , & self . id) ? ; state . serialize_field (crate :: prisma :: deliveries :: hash :: NAME , & self . hash) ? ; state . serialize_field (crate :: prisma :: deliveries :: source_chain :: NAME , & self . source_chain) ? ; state . serialize_field (crate :: prisma :: deliveries :: dest_chain :: NAME , & self . dest_chain) ? ; state . serialize_field (crate :: prisma :: deliveries :: delivery_type :: NAME , & self . delivery_type) ? ; state . serialize_field (crate :: prisma :: deliveries :: created_at :: NAME , & self . created_at) ? ; state . serialize_field (crate :: prisma :: deliveries :: height :: NAME , & self . height) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , id , hash , source_chain , dest_chain , delivery_type , created_at , height } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: deliveries :: $ field :: NAME) , + , crate :: prisma :: deliveries :: id :: NAME , crate :: prisma :: deliveries :: hash :: NAME , crate :: prisma :: deliveries :: source_chain :: NAME , crate :: prisma :: deliveries :: dest_chain :: NAME , crate :: prisma :: deliveries :: delivery_type :: NAME , crate :: prisma :: deliveries :: created_at :: NAME , crate :: prisma :: deliveries :: height :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: deliveries :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: deliveries :: id :: NAME => Ok (Field :: id) , crate :: prisma :: deliveries :: hash :: NAME => Ok (Field :: hash) , crate :: prisma :: deliveries :: source_chain :: NAME => Ok (Field :: source_chain) , crate :: prisma :: deliveries :: dest_chain :: NAME => Ok (Field :: dest_chain) , crate :: prisma :: deliveries :: delivery_type :: NAME => Ok (Field :: delivery_type) , crate :: prisma :: deliveries :: created_at :: NAME => Ok (Field :: created_at) , crate :: prisma :: deliveries :: height :: NAME => Ok (Field :: height) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut id = None ; let mut hash = None ; let mut source_chain = None ; let mut dest_chain = None ; let mut delivery_type = None ; let mut created_at = None ; let mut height = None ; while let Some (key) = map . next_key () ? { match key { Field :: id => { if id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: deliveries :: id :: NAME)) ; } id = Some (map . next_value () ?) ; } Field :: hash => { if hash . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: deliveries :: hash :: NAME)) ; } hash = Some (map . next_value () ?) ; } Field :: source_chain => { if source_chain . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: deliveries :: source_chain :: NAME)) ; } source_chain = Some (map . next_value () ?) ; } Field :: dest_chain => { if dest_chain . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: deliveries :: dest_chain :: NAME)) ; } dest_chain = Some (map . next_value () ?) ; } Field :: delivery_type => { if delivery_type . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: deliveries :: delivery_type :: NAME)) ; } delivery_type = Some (map . next_value () ?) ; } Field :: created_at => { if created_at . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: deliveries :: created_at :: NAME)) ; } created_at = Some (map . next_value () ?) ; } Field :: height => { if height . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: deliveries :: height :: NAME)) ; } height = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: deliveries :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: deliveries :: $ field :: NAME)) ? ;) * let id = id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: deliveries :: id :: NAME)) ? ; let hash = hash . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: deliveries :: hash :: NAME)) ? ; let source_chain = source_chain . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: deliveries :: source_chain :: NAME)) ? ; let dest_chain = dest_chain . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: deliveries :: dest_chain :: NAME)) ? ; let delivery_type = delivery_type . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: deliveries :: delivery_type :: NAME)) ? ; let created_at = created_at . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: deliveries :: created_at :: NAME)) ? ; let height = height . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: deliveries :: height :: NAME)) ? ; Ok (Data { id , hash , source_chain , dest_chain , delivery_type , created_at , height , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "hash" , "source_chain" , "dest_chain" , "delivery_type" , "created_at" , "height"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: deliveries :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Deliveries" , available relations are "")) } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: deliveries :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; hash) => { "hash" } ; (@ field_serde_name ; source_chain) => { "source_chain" } ; (@ field_serde_name ; dest_chain) => { "dest_chain" } ; (@ field_serde_name ; delivery_type) => { "delivery_type" } ; (@ field_serde_name ; created_at) => { "created_at" } ; (@ field_serde_name ; height) => { "height" } ; }
	pub use _include_deliveries as include;
	pub enum IncludeParam {
		Id(id::Include),
		Hash(hash::Include),
		SourceChain(source_chain::Include),
		DestChain(dest_chain::Include),
		DeliveryType(delivery_type::Include),
		CreatedAt(created_at::Include),
		Height(height::Include),
	}
	impl IncludeParam {
		pub fn to_selection(self) -> ::prisma_client_rust::Selection {
			match self {
				Self::Id(data) => data.to_selection(),
				Self::Hash(data) => data.to_selection(),
				Self::SourceChain(data) => data.to_selection(),
				Self::DestChain(data) => data.to_selection(),
				Self::DeliveryType(data) => data.to_selection(),
				Self::CreatedAt(data) => data.to_selection(),
				Self::Height(data) => data.to_selection(),
			}
		}
	}
	#[macro_export]
	macro_rules ! _partial_unchecked_deliveries { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: deliveries struct $ struct_name { # [serde (rename = "id")] pub id : i32 , # [serde (rename = "hash")] pub hash : String , # [serde (rename = "source_chain")] pub source_chain : String , # [serde (rename = "dest_chain")] pub dest_chain : String , # [serde (rename = "delivery_type")] pub delivery_type : i32 , # [serde (rename = "created_at")] pub created_at : i32 , # [serde (rename = "height")] pub height : i32 } [$ ($ scalar_field) , +] } } ; }
	pub use _partial_unchecked_deliveries as partial_unchecked;
	#[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
	pub struct Data {
		#[serde(rename = "id")]
		pub id: i32,
		#[serde(rename = "hash")]
		pub hash: String,
		#[serde(rename = "source_chain")]
		pub source_chain: String,
		#[serde(rename = "dest_chain")]
		pub dest_chain: String,
		#[serde(rename = "delivery_type")]
		pub delivery_type: i32,
		#[serde(rename = "created_at")]
		pub created_at: i32,
		#[serde(rename = "height")]
		pub height: i32,
	}
	impl Data {}
	#[derive(Clone)]
	pub enum WithParam {}
	impl Into<::prisma_client_rust::Selection> for WithParam {
		fn into(self) -> ::prisma_client_rust::Selection {
			match self {}
		}
	}
	#[derive(Clone)]
	pub enum SetParam {
		SetId(i32),
		IncrementId(i32),
		DecrementId(i32),
		MultiplyId(i32),
		DivideId(i32),
		SetHash(String),
		SetSourceChain(String),
		SetDestChain(String),
		SetDeliveryType(i32),
		IncrementDeliveryType(i32),
		DecrementDeliveryType(i32),
		MultiplyDeliveryType(i32),
		DivideDeliveryType(i32),
		SetCreatedAt(i32),
		IncrementCreatedAt(i32),
		DecrementCreatedAt(i32),
		MultiplyCreatedAt(i32),
		DivideCreatedAt(i32),
		SetHeight(i32),
		IncrementHeight(i32),
		DecrementHeight(i32),
		MultiplyHeight(i32),
		DivideHeight(i32),
	}
	impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
		fn from(param: SetParam) -> Self {
			match param {
				SetParam::SetId(value) =>
					(id::NAME.to_string(), ::prisma_client_rust::PrismaValue::Int(value as i64)),
				SetParam::IncrementId(value) => (
					id::NAME.to_string(),
					::prisma_client_rust::PrismaValue::Object(vec![(
						"increment".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
				),
				SetParam::DecrementId(value) => (
					id::NAME.to_string(),
					::prisma_client_rust::PrismaValue::Object(vec![(
						"decrement".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
				),
				SetParam::MultiplyId(value) => (
					id::NAME.to_string(),
					::prisma_client_rust::PrismaValue::Object(vec![(
						"multiply".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
				),
				SetParam::DivideId(value) => (
					id::NAME.to_string(),
					::prisma_client_rust::PrismaValue::Object(vec![(
						"divide".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
				),
				SetParam::SetHash(value) =>
					(hash::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(value)),
				SetParam::SetSourceChain(value) => (
					source_chain::NAME.to_string(),
					::prisma_client_rust::PrismaValue::String(value),
				),
				SetParam::SetDestChain(value) =>
					(dest_chain::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(value)),
				SetParam::SetDeliveryType(value) => (
					delivery_type::NAME.to_string(),
					::prisma_client_rust::PrismaValue::Int(value as i64),
				),
				SetParam::IncrementDeliveryType(value) => (
					delivery_type::NAME.to_string(),
					::prisma_client_rust::PrismaValue::Object(vec![(
						"increment".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
				),
				SetParam::DecrementDeliveryType(value) => (
					delivery_type::NAME.to_string(),
					::prisma_client_rust::PrismaValue::Object(vec![(
						"decrement".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
				),
				SetParam::MultiplyDeliveryType(value) => (
					delivery_type::NAME.to_string(),
					::prisma_client_rust::PrismaValue::Object(vec![(
						"multiply".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
				),
				SetParam::DivideDeliveryType(value) => (
					delivery_type::NAME.to_string(),
					::prisma_client_rust::PrismaValue::Object(vec![(
						"divide".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
				),
				SetParam::SetCreatedAt(value) => (
					created_at::NAME.to_string(),
					::prisma_client_rust::PrismaValue::Int(value as i64),
				),
				SetParam::IncrementCreatedAt(value) => (
					created_at::NAME.to_string(),
					::prisma_client_rust::PrismaValue::Object(vec![(
						"increment".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
				),
				SetParam::DecrementCreatedAt(value) => (
					created_at::NAME.to_string(),
					::prisma_client_rust::PrismaValue::Object(vec![(
						"decrement".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
				),
				SetParam::MultiplyCreatedAt(value) => (
					created_at::NAME.to_string(),
					::prisma_client_rust::PrismaValue::Object(vec![(
						"multiply".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
				),
				SetParam::DivideCreatedAt(value) => (
					created_at::NAME.to_string(),
					::prisma_client_rust::PrismaValue::Object(vec![(
						"divide".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
				),
				SetParam::SetHeight(value) =>
					(height::NAME.to_string(), ::prisma_client_rust::PrismaValue::Int(value as i64)),
				SetParam::IncrementHeight(value) => (
					height::NAME.to_string(),
					::prisma_client_rust::PrismaValue::Object(vec![(
						"increment".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
				),
				SetParam::DecrementHeight(value) => (
					height::NAME.to_string(),
					::prisma_client_rust::PrismaValue::Object(vec![(
						"decrement".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
				),
				SetParam::MultiplyHeight(value) => (
					height::NAME.to_string(),
					::prisma_client_rust::PrismaValue::Object(vec![(
						"multiply".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
				),
				SetParam::DivideHeight(value) => (
					height::NAME.to_string(),
					::prisma_client_rust::PrismaValue::Object(vec![(
						"divide".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
				),
			}
		}
	}
	#[derive(Clone)]
	pub enum UncheckedSetParam {
		Id(i32),
		Hash(String),
		SourceChain(String),
		DestChain(String),
		DeliveryType(i32),
		CreatedAt(i32),
		Height(i32),
	}
	impl From<UncheckedSetParam> for SetParam {
		fn from(param: UncheckedSetParam) -> Self {
			match param {
				UncheckedSetParam::Id(value) => Self::SetId(value),
				UncheckedSetParam::Hash(value) => Self::SetHash(value),
				UncheckedSetParam::SourceChain(value) => Self::SetSourceChain(value),
				UncheckedSetParam::DestChain(value) => Self::SetDestChain(value),
				UncheckedSetParam::DeliveryType(value) => Self::SetDeliveryType(value),
				UncheckedSetParam::CreatedAt(value) => Self::SetCreatedAt(value),
				UncheckedSetParam::Height(value) => Self::SetHeight(value),
			}
		}
	}
	#[derive(Clone)]
	pub enum OrderByParam {
		Id(::prisma_client_rust::Direction),
		Hash(::prisma_client_rust::Direction),
		SourceChain(::prisma_client_rust::Direction),
		DestChain(::prisma_client_rust::Direction),
		DeliveryType(::prisma_client_rust::Direction),
		CreatedAt(::prisma_client_rust::Direction),
		Height(::prisma_client_rust::Direction),
	}
	impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
		fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
			match self {
				Self::Id(direction) => (
					id::NAME.to_string(),
					::prisma_client_rust::PrismaValue::String(direction.to_string()),
				),
				Self::Hash(direction) => (
					hash::NAME.to_string(),
					::prisma_client_rust::PrismaValue::String(direction.to_string()),
				),
				Self::SourceChain(direction) => (
					source_chain::NAME.to_string(),
					::prisma_client_rust::PrismaValue::String(direction.to_string()),
				),
				Self::DestChain(direction) => (
					dest_chain::NAME.to_string(),
					::prisma_client_rust::PrismaValue::String(direction.to_string()),
				),
				Self::DeliveryType(direction) => (
					delivery_type::NAME.to_string(),
					::prisma_client_rust::PrismaValue::String(direction.to_string()),
				),
				Self::CreatedAt(direction) => (
					created_at::NAME.to_string(),
					::prisma_client_rust::PrismaValue::String(direction.to_string()),
				),
				Self::Height(direction) => (
					height::NAME.to_string(),
					::prisma_client_rust::PrismaValue::String(direction.to_string()),
				),
			}
		}
	}
	#[derive(Clone)]
	pub enum WhereParam {
		Not(Vec<WhereParam>),
		Or(Vec<WhereParam>),
		And(Vec<WhereParam>),
		Id(_prisma::read_filters::IntFilter),
		Hash(_prisma::read_filters::StringFilter),
		SourceChain(_prisma::read_filters::StringFilter),
		DestChain(_prisma::read_filters::StringFilter),
		DeliveryType(_prisma::read_filters::IntFilter),
		CreatedAt(_prisma::read_filters::IntFilter),
		Height(_prisma::read_filters::IntFilter),
	}
	impl ::prisma_client_rust::WhereInput for WhereParam {
		fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
			let (name, value) = match self {
				Self::Not(value) => (
					"NOT",
					::prisma_client_rust::SerializedWhereValue::Object(
						::prisma_client_rust::merge_fields(
							value
								.into_iter()
								.map(::prisma_client_rust::WhereInput::serialize)
								.map(Into::into)
								.collect(),
						),
					),
				),
				Self::Or(value) => (
					"OR",
					::prisma_client_rust::SerializedWhereValue::List(
						value
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(Into::into)
							.map(|v| vec![v])
							.map(::prisma_client_rust::PrismaValue::Object)
							.collect(),
					),
				),
				Self::And(value) => (
					"AND",
					::prisma_client_rust::SerializedWhereValue::Object(
						::prisma_client_rust::merge_fields(
							value
								.into_iter()
								.map(::prisma_client_rust::WhereInput::serialize)
								.map(Into::into)
								.collect(),
						),
					),
				),
				Self::Id(value) => (id::NAME, value.into()),
				Self::Hash(value) => (hash::NAME, value.into()),
				Self::SourceChain(value) => (source_chain::NAME, value.into()),
				Self::DestChain(value) => (dest_chain::NAME, value.into()),
				Self::DeliveryType(value) => (delivery_type::NAME, value.into()),
				Self::CreatedAt(value) => (created_at::NAME, value.into()),
				Self::Height(value) => (height::NAME, value.into()),
			};
			::prisma_client_rust::SerializedWhereInput::new(name, value.into())
		}
	}
	#[derive(Clone)]
	pub enum UniqueWhereParam {
		IdEquals(i32),
	}
	impl From<UniqueWhereParam> for WhereParam {
		fn from(value: UniqueWhereParam) -> Self {
			match value {
				UniqueWhereParam::IdEquals(value) =>
					Self::Id(_prisma::read_filters::IntFilter::Equals(value)),
			}
		}
	}
	impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
		fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
			match op {
				::prisma_client_rust::Operator::Not(value) => Self::Not(value),
				::prisma_client_rust::Operator::And(value) => Self::And(value),
				::prisma_client_rust::Operator::Or(value) => Self::Or(value),
			}
		}
	}
	#[derive(Clone)]
	pub struct Types;
	impl ::prisma_client_rust::ModelTypes for Types {
		type Data = Data;
		type Where = WhereParam;
		type UncheckedSet = UncheckedSetParam;
		type Set = SetParam;
		type With = WithParam;
		type OrderBy = OrderByParam;
		type Cursor = UniqueWhereParam;
		const MODEL: &'static str = NAME;
		fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
			vec![
				::prisma_client_rust::sel(id::NAME),
				::prisma_client_rust::sel(hash::NAME),
				::prisma_client_rust::sel(source_chain::NAME),
				::prisma_client_rust::sel(dest_chain::NAME),
				::prisma_client_rust::sel(delivery_type::NAME),
				::prisma_client_rust::sel(created_at::NAME),
				::prisma_client_rust::sel(height::NAME),
			]
		}
	}
	pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
	pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
	pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
	pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
	pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
	pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
	pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
	pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
	pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
	pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
	pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
	pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
	pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
	#[derive(Clone)]
	pub struct Actions<'a> {
		pub client: &'a ::prisma_client_rust::PrismaClientInternals,
	}
	impl<'a> Actions<'a> {
		pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
			FindUnique::new(self.client, _where.into())
		}
		pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
			FindFirst::new(self.client, _where)
		}
		pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
			FindMany::new(self.client, _where)
		}
		pub fn create(
			self,
			hash: String,
			source_chain: String,
			dest_chain: String,
			delivery_type: i32,
			created_at: i32,
			height: i32,
			mut _params: Vec<SetParam>,
		) -> Create<'a> {
			_params.extend([
				hash::set(hash),
				source_chain::set(source_chain),
				dest_chain::set(dest_chain),
				delivery_type::set(delivery_type),
				created_at::set(created_at),
				height::set(height),
			]);
			Create::new(self.client, _params)
		}
		pub fn create_unchecked(
			self,
			hash: String,
			source_chain: String,
			dest_chain: String,
			delivery_type: i32,
			created_at: i32,
			height: i32,
			mut _params: Vec<UncheckedSetParam>,
		) -> Create<'a> {
			_params.extend([
				hash::set(hash),
				source_chain::set(source_chain),
				dest_chain::set(dest_chain),
				delivery_type::set(delivery_type),
				created_at::set(created_at),
				height::set(height),
			]);
			Create::new(self.client, _params.into_iter().map(Into::into).collect())
		}
		pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
			Update::new(self.client, _where.into(), _params, vec![])
		}
		pub fn update_unchecked(
			self,
			_where: UniqueWhereParam,
			_params: Vec<UncheckedSetParam>,
		) -> Update<'a> {
			Update::new(
				self.client,
				_where.into(),
				_params.into_iter().map(Into::into).collect(),
				vec![],
			)
		}
		pub fn update_many(
			self,
			_where: Vec<WhereParam>,
			_params: Vec<SetParam>,
		) -> UpdateMany<'a> {
			UpdateMany::new(self.client, _where, _params)
		}
		pub fn upsert(
			self,
			_where: UniqueWhereParam,
			(hash, source_chain, dest_chain, delivery_type, created_at, height, mut _params): (
				String,
				String,
				String,
				i32,
				i32,
				i32,
				Vec<SetParam>,
			),
			_update: Vec<SetParam>,
		) -> Upsert<'a> {
			_params.extend([
				hash::set(hash),
				source_chain::set(source_chain),
				dest_chain::set(dest_chain),
				delivery_type::set(delivery_type),
				created_at::set(created_at),
				height::set(height),
			]);
			Upsert::new(self.client, _where.into(), _params, _update)
		}
		pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
			Delete::new(self.client, _where.into(), vec![])
		}
		pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
			DeleteMany::new(self.client, _where)
		}
		pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
			Count::new(self.client, _where)
		}
		pub fn find_raw<T: ::prisma_client_rust::Data>(
			self,
		) -> ::prisma_client_rust::FindRaw<'a, Types, T> {
			::prisma_client_rust::FindRaw::new(self.client)
		}
		pub fn aggregate_raw<T: ::prisma_client_rust::Data>(
			self,
		) -> ::prisma_client_rust::AggregateRaw<'a, Types, T> {
			::prisma_client_rust::AggregateRaw::new(self.client)
		}
	}
}
pub mod pending_withdrawal {
	use super::{_prisma::*, *};
	pub const NAME: &str = "PendingWithdrawal";
	pub mod id {
		use super::{
			super::*, OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam,
			WithParam, _prisma::*,
		};
		pub const NAME: &str = "id";
		pub struct Set(pub i32);
		impl From<Set> for SetParam {
			fn from(Set(v): Set) -> Self {
				Self::SetId(v)
			}
		}
		impl From<Set> for UncheckedSetParam {
			fn from(Set(v): Set) -> Self {
				Self::Id(v)
			}
		}
		pub fn set<T: From<Set>>(value: i32) -> T {
			Set(value).into()
		}
		pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
			OrderByParam::Id(direction)
		}
		pub fn equals<T: From<UniqueWhereParam>>(value: i32) -> T {
			UniqueWhereParam::IdEquals(value).into()
		}
		::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Id, {
			fn in_vec(_: Vec<i32>) -> InVec;
			fn not_in_vec(_: Vec<i32>) -> NotInVec;
			fn lt(_: i32) -> Lt;
			fn lte(_: i32) -> Lte;
			fn gt(_: i32) -> Gt;
			fn gte(_: i32) -> Gte;
			fn not(_: i32) -> Not;
		});
		pub fn increment(value: i32) -> SetParam {
			SetParam::IncrementId(value)
		}
		pub fn decrement(value: i32) -> SetParam {
			SetParam::DecrementId(value)
		}
		pub fn multiply(value: i32) -> SetParam {
			SetParam::MultiplyId(value)
		}
		pub fn divide(value: i32) -> SetParam {
			SetParam::DivideId(value)
		}
		pub struct Include;
		impl Into<super::IncludeParam> for Include {
			fn into(self) -> super::IncludeParam {
				super::IncludeParam::Id(self)
			}
		}
		impl Include {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
		pub struct Select;
		impl Into<super::SelectParam> for Select {
			fn into(self) -> super::SelectParam {
				super::SelectParam::Id(self)
			}
		}
		impl Select {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
	}
	pub mod dest {
		use super::{
			super::*, OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam,
			WithParam, _prisma::*,
		};
		pub const NAME: &str = "dest";
		pub struct Set(pub String);
		impl From<Set> for SetParam {
			fn from(Set(v): Set) -> Self {
				Self::SetDest(v)
			}
		}
		impl From<Set> for UncheckedSetParam {
			fn from(Set(v): Set) -> Self {
				Self::Dest(v)
			}
		}
		pub fn set<T: From<Set>>(value: String) -> T {
			Set(value).into()
		}
		pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
			OrderByParam::Dest(direction)
		}
		pub fn equals(value: String) -> WhereParam {
			WhereParam::Dest(_prisma::read_filters::StringFilter::Equals(value))
		}
		::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::StringFilter, Dest, {
			fn in_vec(_: Vec<String>) -> InVec;
			fn not_in_vec(_: Vec<String>) -> NotInVec;
			fn lt(_: String) -> Lt;
			fn lte(_: String) -> Lte;
			fn gt(_: String) -> Gt;
			fn gte(_: String) -> Gte;
			fn contains(_: String) -> Contains;
			fn starts_with(_: String) -> StartsWith;
			fn ends_with(_: String) -> EndsWith;
			fn not(_: String) -> Not;
		});
		pub struct Include;
		impl Into<super::IncludeParam> for Include {
			fn into(self) -> super::IncludeParam {
				super::IncludeParam::Dest(self)
			}
		}
		impl Include {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
		pub struct Select;
		impl Into<super::SelectParam> for Select {
			fn into(self) -> super::SelectParam {
				super::SelectParam::Dest(self)
			}
		}
		impl Select {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
	}
	pub mod encoded {
		use super::{
			super::*, OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam,
			WithParam, _prisma::*,
		};
		pub const NAME: &str = "encoded";
		pub struct Set(pub Vec<u8>);
		impl From<Set> for SetParam {
			fn from(Set(v): Set) -> Self {
				Self::SetEncoded(v)
			}
		}
		impl From<Set> for UncheckedSetParam {
			fn from(Set(v): Set) -> Self {
				Self::Encoded(v)
			}
		}
		pub fn set<T: From<Set>>(value: Vec<u8>) -> T {
			Set(value).into()
		}
		pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
			OrderByParam::Encoded(direction)
		}
		pub fn equals(value: Vec<u8>) -> WhereParam {
			WhereParam::Encoded(_prisma::read_filters::BytesFilter::Equals(value))
		}
		::prisma_client_rust::scalar_where_param_fns!(
			_prisma::read_filters::BytesFilter,
			Encoded,
			{
				fn in_vec(_: Vec<Vec<u8>>) -> InVec;
				fn not_in_vec(_: Vec<Vec<u8>>) -> NotInVec;
				fn not(_: Vec<u8>) -> Not;
			}
		);
		pub struct Include;
		impl Into<super::IncludeParam> for Include {
			fn into(self) -> super::IncludeParam {
				super::IncludeParam::Encoded(self)
			}
		}
		impl Include {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
		pub struct Select;
		impl Into<super::SelectParam> for Select {
			fn into(self) -> super::SelectParam {
				super::SelectParam::Encoded(self)
			}
		}
		impl Select {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
	}
	pub fn create(
		dest: String,
		encoded: Vec<u8>,
		_params: Vec<SetParam>,
	) -> (String, Vec<u8>, Vec<SetParam>) {
		(dest, encoded, _params)
	}
	pub fn create_unchecked(
		dest: String,
		encoded: Vec<u8>,
		_params: Vec<SetParam>,
	) -> (String, Vec<u8>, Vec<SetParam>) {
		(dest, encoded, _params)
	}
	#[macro_export]
	macro_rules ! _select_pending_withdrawal { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: pending_withdrawal :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: pending_withdrawal :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: pending_withdrawal :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: pending_withdrawal :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: pending_withdrawal :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: pending_withdrawal :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { id , dest , encoded } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : crate :: prisma :: pending_withdrawal :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: pending_withdrawal :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: pending_withdrawal :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: pending_withdrawal :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: pending_withdrawal :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: pending_withdrawal :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "dest" , "encoded"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: pending_withdrawal :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; id) => { i32 } ; (@ field_type ; dest) => { String } ; (@ field_type ; encoded) => { Vec < u8 > } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "PendingWithdrawal" , available relations are "id, dest, encoded")) } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; id) => { Into :: < crate :: prisma :: pending_withdrawal :: SelectParam > :: into (crate :: prisma :: pending_withdrawal :: id :: Select) } ; (@ selection_field_to_selection_param ; dest) => { Into :: < crate :: prisma :: pending_withdrawal :: SelectParam > :: into (crate :: prisma :: pending_withdrawal :: dest :: Select) } ; (@ selection_field_to_selection_param ; encoded) => { Into :: < crate :: prisma :: pending_withdrawal :: SelectParam > :: into (crate :: prisma :: pending_withdrawal :: encoded :: Select) } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: pending_withdrawal :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; dest) => { "dest" } ; (@ field_serde_name ; encoded) => { "encoded" } ; }
	pub use _select_pending_withdrawal as select;
	pub enum SelectParam {
		Id(id::Select),
		Dest(dest::Select),
		Encoded(encoded::Select),
	}
	impl SelectParam {
		pub fn to_selection(self) -> ::prisma_client_rust::Selection {
			match self {
				Self::Id(data) => data.to_selection(),
				Self::Dest(data) => data.to_selection(),
				Self::Encoded(data) => data.to_selection(),
			}
		}
	}
	#[macro_export]
	macro_rules ! _include_pending_withdrawal { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: pending_withdrawal :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: pending_withdrawal :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: pending_withdrawal :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: pending_withdrawal :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: pending_withdrawal :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: pending_withdrawal :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: pending_withdrawal :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: pending_withdrawal :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub id : i32 , pub dest : String , pub encoded : Vec < u8 > , $ (pub $ field : crate :: prisma :: pending_withdrawal :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (id) , stringify ! (dest) , stringify ! (encoded)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: pending_withdrawal :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: pending_withdrawal :: id :: NAME , & self . id) ? ; state . serialize_field (crate :: prisma :: pending_withdrawal :: dest :: NAME , & self . dest) ? ; state . serialize_field (crate :: prisma :: pending_withdrawal :: encoded :: NAME , & self . encoded) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , id , dest , encoded } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: pending_withdrawal :: $ field :: NAME) , + , crate :: prisma :: pending_withdrawal :: id :: NAME , crate :: prisma :: pending_withdrawal :: dest :: NAME , crate :: prisma :: pending_withdrawal :: encoded :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: pending_withdrawal :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: pending_withdrawal :: id :: NAME => Ok (Field :: id) , crate :: prisma :: pending_withdrawal :: dest :: NAME => Ok (Field :: dest) , crate :: prisma :: pending_withdrawal :: encoded :: NAME => Ok (Field :: encoded) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut id = None ; let mut dest = None ; let mut encoded = None ; while let Some (key) = map . next_key () ? { match key { Field :: id => { if id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: pending_withdrawal :: id :: NAME)) ; } id = Some (map . next_value () ?) ; } Field :: dest => { if dest . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: pending_withdrawal :: dest :: NAME)) ; } dest = Some (map . next_value () ?) ; } Field :: encoded => { if encoded . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: pending_withdrawal :: encoded :: NAME)) ; } encoded = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: pending_withdrawal :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: pending_withdrawal :: $ field :: NAME)) ? ;) * let id = id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: pending_withdrawal :: id :: NAME)) ? ; let dest = dest . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: pending_withdrawal :: dest :: NAME)) ? ; let encoded = encoded . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: pending_withdrawal :: encoded :: NAME)) ? ; Ok (Data { id , dest , encoded , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "dest" , "encoded"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: pending_withdrawal :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "PendingWithdrawal" , available relations are "")) } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: pending_withdrawal :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; dest) => { "dest" } ; (@ field_serde_name ; encoded) => { "encoded" } ; }
	pub use _include_pending_withdrawal as include;
	pub enum IncludeParam {
		Id(id::Include),
		Dest(dest::Include),
		Encoded(encoded::Include),
	}
	impl IncludeParam {
		pub fn to_selection(self) -> ::prisma_client_rust::Selection {
			match self {
				Self::Id(data) => data.to_selection(),
				Self::Dest(data) => data.to_selection(),
				Self::Encoded(data) => data.to_selection(),
			}
		}
	}
	#[macro_export]
	macro_rules ! _partial_unchecked_pending_withdrawal { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: pending_withdrawal struct $ struct_name { # [serde (rename = "id")] pub id : i32 , # [serde (rename = "dest")] pub dest : String , # [serde (rename = "encoded")] pub encoded : Vec < u8 > } [$ ($ scalar_field) , +] } } ; }
	pub use _partial_unchecked_pending_withdrawal as partial_unchecked;
	#[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
	pub struct Data {
		#[serde(rename = "id")]
		pub id: i32,
		#[serde(rename = "dest")]
		pub dest: String,
		#[serde(rename = "encoded")]
		pub encoded: Vec<u8>,
	}
	impl Data {}
	#[derive(Clone)]
	pub enum WithParam {}
	impl Into<::prisma_client_rust::Selection> for WithParam {
		fn into(self) -> ::prisma_client_rust::Selection {
			match self {}
		}
	}
	#[derive(Clone)]
	pub enum SetParam {
		SetId(i32),
		IncrementId(i32),
		DecrementId(i32),
		MultiplyId(i32),
		DivideId(i32),
		SetDest(String),
		SetEncoded(Vec<u8>),
	}
	impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
		fn from(param: SetParam) -> Self {
			match param {
				SetParam::SetId(value) =>
					(id::NAME.to_string(), ::prisma_client_rust::PrismaValue::Int(value as i64)),
				SetParam::IncrementId(value) => (
					id::NAME.to_string(),
					::prisma_client_rust::PrismaValue::Object(vec![(
						"increment".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
				),
				SetParam::DecrementId(value) => (
					id::NAME.to_string(),
					::prisma_client_rust::PrismaValue::Object(vec![(
						"decrement".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
				),
				SetParam::MultiplyId(value) => (
					id::NAME.to_string(),
					::prisma_client_rust::PrismaValue::Object(vec![(
						"multiply".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
				),
				SetParam::DivideId(value) => (
					id::NAME.to_string(),
					::prisma_client_rust::PrismaValue::Object(vec![(
						"divide".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
				),
				SetParam::SetDest(value) =>
					(dest::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(value)),
				SetParam::SetEncoded(value) =>
					(encoded::NAME.to_string(), ::prisma_client_rust::PrismaValue::Bytes(value)),
			}
		}
	}
	#[derive(Clone)]
	pub enum UncheckedSetParam {
		Id(i32),
		Dest(String),
		Encoded(Vec<u8>),
	}
	impl From<UncheckedSetParam> for SetParam {
		fn from(param: UncheckedSetParam) -> Self {
			match param {
				UncheckedSetParam::Id(value) => Self::SetId(value),
				UncheckedSetParam::Dest(value) => Self::SetDest(value),
				UncheckedSetParam::Encoded(value) => Self::SetEncoded(value),
			}
		}
	}
	#[derive(Clone)]
	pub enum OrderByParam {
		Id(::prisma_client_rust::Direction),
		Dest(::prisma_client_rust::Direction),
		Encoded(::prisma_client_rust::Direction),
	}
	impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
		fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
			match self {
				Self::Id(direction) => (
					id::NAME.to_string(),
					::prisma_client_rust::PrismaValue::String(direction.to_string()),
				),
				Self::Dest(direction) => (
					dest::NAME.to_string(),
					::prisma_client_rust::PrismaValue::String(direction.to_string()),
				),
				Self::Encoded(direction) => (
					encoded::NAME.to_string(),
					::prisma_client_rust::PrismaValue::String(direction.to_string()),
				),
			}
		}
	}
	#[derive(Clone)]
	pub enum WhereParam {
		Not(Vec<WhereParam>),
		Or(Vec<WhereParam>),
		And(Vec<WhereParam>),
		Id(_prisma::read_filters::IntFilter),
		Dest(_prisma::read_filters::StringFilter),
		Encoded(_prisma::read_filters::BytesFilter),
	}
	impl ::prisma_client_rust::WhereInput for WhereParam {
		fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
			let (name, value) = match self {
				Self::Not(value) => (
					"NOT",
					::prisma_client_rust::SerializedWhereValue::Object(
						::prisma_client_rust::merge_fields(
							value
								.into_iter()
								.map(::prisma_client_rust::WhereInput::serialize)
								.map(Into::into)
								.collect(),
						),
					),
				),
				Self::Or(value) => (
					"OR",
					::prisma_client_rust::SerializedWhereValue::List(
						value
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(Into::into)
							.map(|v| vec![v])
							.map(::prisma_client_rust::PrismaValue::Object)
							.collect(),
					),
				),
				Self::And(value) => (
					"AND",
					::prisma_client_rust::SerializedWhereValue::Object(
						::prisma_client_rust::merge_fields(
							value
								.into_iter()
								.map(::prisma_client_rust::WhereInput::serialize)
								.map(Into::into)
								.collect(),
						),
					),
				),
				Self::Id(value) => (id::NAME, value.into()),
				Self::Dest(value) => (dest::NAME, value.into()),
				Self::Encoded(value) => (encoded::NAME, value.into()),
			};
			::prisma_client_rust::SerializedWhereInput::new(name, value.into())
		}
	}
	#[derive(Clone)]
	pub enum UniqueWhereParam {
		IdEquals(i32),
	}
	impl From<UniqueWhereParam> for WhereParam {
		fn from(value: UniqueWhereParam) -> Self {
			match value {
				UniqueWhereParam::IdEquals(value) =>
					Self::Id(_prisma::read_filters::IntFilter::Equals(value)),
			}
		}
	}
	impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
		fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
			match op {
				::prisma_client_rust::Operator::Not(value) => Self::Not(value),
				::prisma_client_rust::Operator::And(value) => Self::And(value),
				::prisma_client_rust::Operator::Or(value) => Self::Or(value),
			}
		}
	}
	#[derive(Clone)]
	pub struct Types;
	impl ::prisma_client_rust::ModelTypes for Types {
		type Data = Data;
		type Where = WhereParam;
		type UncheckedSet = UncheckedSetParam;
		type Set = SetParam;
		type With = WithParam;
		type OrderBy = OrderByParam;
		type Cursor = UniqueWhereParam;
		const MODEL: &'static str = NAME;
		fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
			vec![
				::prisma_client_rust::sel(id::NAME),
				::prisma_client_rust::sel(dest::NAME),
				::prisma_client_rust::sel(encoded::NAME),
			]
		}
	}
	pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
	pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
	pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
	pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
	pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
	pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
	pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
	pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
	pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
	pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
	pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
	pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
	pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
	#[derive(Clone)]
	pub struct Actions<'a> {
		pub client: &'a ::prisma_client_rust::PrismaClientInternals,
	}
	impl<'a> Actions<'a> {
		pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
			FindUnique::new(self.client, _where.into())
		}
		pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
			FindFirst::new(self.client, _where)
		}
		pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
			FindMany::new(self.client, _where)
		}
		pub fn create(
			self,
			dest: String,
			encoded: Vec<u8>,
			mut _params: Vec<SetParam>,
		) -> Create<'a> {
			_params.extend([dest::set(dest), encoded::set(encoded)]);
			Create::new(self.client, _params)
		}
		pub fn create_unchecked(
			self,
			dest: String,
			encoded: Vec<u8>,
			mut _params: Vec<UncheckedSetParam>,
		) -> Create<'a> {
			_params.extend([dest::set(dest), encoded::set(encoded)]);
			Create::new(self.client, _params.into_iter().map(Into::into).collect())
		}
		pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
			Update::new(self.client, _where.into(), _params, vec![])
		}
		pub fn update_unchecked(
			self,
			_where: UniqueWhereParam,
			_params: Vec<UncheckedSetParam>,
		) -> Update<'a> {
			Update::new(
				self.client,
				_where.into(),
				_params.into_iter().map(Into::into).collect(),
				vec![],
			)
		}
		pub fn update_many(
			self,
			_where: Vec<WhereParam>,
			_params: Vec<SetParam>,
		) -> UpdateMany<'a> {
			UpdateMany::new(self.client, _where, _params)
		}
		pub fn upsert(
			self,
			_where: UniqueWhereParam,
			(dest, encoded, mut _params): (String, Vec<u8>, Vec<SetParam>),
			_update: Vec<SetParam>,
		) -> Upsert<'a> {
			_params.extend([dest::set(dest), encoded::set(encoded)]);
			Upsert::new(self.client, _where.into(), _params, _update)
		}
		pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
			Delete::new(self.client, _where.into(), vec![])
		}
		pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
			DeleteMany::new(self.client, _where)
		}
		pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
			Count::new(self.client, _where)
		}
		pub fn find_raw<T: ::prisma_client_rust::Data>(
			self,
		) -> ::prisma_client_rust::FindRaw<'a, Types, T> {
			::prisma_client_rust::FindRaw::new(self.client)
		}
		pub fn aggregate_raw<T: ::prisma_client_rust::Data>(
			self,
		) -> ::prisma_client_rust::AggregateRaw<'a, Types, T> {
			::prisma_client_rust::AggregateRaw::new(self.client)
		}
	}
}
pub mod unprofitable_messages {
	use super::{_prisma::*, *};
	pub const NAME: &str = "UnprofitableMessages";
	pub mod id {
		use super::{
			super::*, OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam,
			WithParam, _prisma::*,
		};
		pub const NAME: &str = "id";
		pub struct Set(pub i32);
		impl From<Set> for SetParam {
			fn from(Set(v): Set) -> Self {
				Self::SetId(v)
			}
		}
		impl From<Set> for UncheckedSetParam {
			fn from(Set(v): Set) -> Self {
				Self::Id(v)
			}
		}
		pub fn set<T: From<Set>>(value: i32) -> T {
			Set(value).into()
		}
		pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
			OrderByParam::Id(direction)
		}
		pub fn equals<T: From<UniqueWhereParam>>(value: i32) -> T {
			UniqueWhereParam::IdEquals(value).into()
		}
		::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Id, {
			fn in_vec(_: Vec<i32>) -> InVec;
			fn not_in_vec(_: Vec<i32>) -> NotInVec;
			fn lt(_: i32) -> Lt;
			fn lte(_: i32) -> Lte;
			fn gt(_: i32) -> Gt;
			fn gte(_: i32) -> Gte;
			fn not(_: i32) -> Not;
		});
		pub fn increment(value: i32) -> SetParam {
			SetParam::IncrementId(value)
		}
		pub fn decrement(value: i32) -> SetParam {
			SetParam::DecrementId(value)
		}
		pub fn multiply(value: i32) -> SetParam {
			SetParam::MultiplyId(value)
		}
		pub fn divide(value: i32) -> SetParam {
			SetParam::DivideId(value)
		}
		pub struct Include;
		impl Into<super::IncludeParam> for Include {
			fn into(self) -> super::IncludeParam {
				super::IncludeParam::Id(self)
			}
		}
		impl Include {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
		pub struct Select;
		impl Into<super::SelectParam> for Select {
			fn into(self) -> super::SelectParam {
				super::SelectParam::Id(self)
			}
		}
		impl Select {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
	}
	pub mod dest {
		use super::{
			super::*, OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam,
			WithParam, _prisma::*,
		};
		pub const NAME: &str = "dest";
		pub struct Set(pub String);
		impl From<Set> for SetParam {
			fn from(Set(v): Set) -> Self {
				Self::SetDest(v)
			}
		}
		impl From<Set> for UncheckedSetParam {
			fn from(Set(v): Set) -> Self {
				Self::Dest(v)
			}
		}
		pub fn set<T: From<Set>>(value: String) -> T {
			Set(value).into()
		}
		pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
			OrderByParam::Dest(direction)
		}
		pub fn equals(value: String) -> WhereParam {
			WhereParam::Dest(_prisma::read_filters::StringFilter::Equals(value))
		}
		::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::StringFilter, Dest, {
			fn in_vec(_: Vec<String>) -> InVec;
			fn not_in_vec(_: Vec<String>) -> NotInVec;
			fn lt(_: String) -> Lt;
			fn lte(_: String) -> Lte;
			fn gt(_: String) -> Gt;
			fn gte(_: String) -> Gte;
			fn contains(_: String) -> Contains;
			fn starts_with(_: String) -> StartsWith;
			fn ends_with(_: String) -> EndsWith;
			fn not(_: String) -> Not;
		});
		pub struct Include;
		impl Into<super::IncludeParam> for Include {
			fn into(self) -> super::IncludeParam {
				super::IncludeParam::Dest(self)
			}
		}
		impl Include {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
		pub struct Select;
		impl Into<super::SelectParam> for Select {
			fn into(self) -> super::SelectParam {
				super::SelectParam::Dest(self)
			}
		}
		impl Select {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
	}
	pub mod encoded {
		use super::{
			super::*, OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam,
			WithParam, _prisma::*,
		};
		pub const NAME: &str = "encoded";
		pub struct Set(pub Vec<u8>);
		impl From<Set> for SetParam {
			fn from(Set(v): Set) -> Self {
				Self::SetEncoded(v)
			}
		}
		impl From<Set> for UncheckedSetParam {
			fn from(Set(v): Set) -> Self {
				Self::Encoded(v)
			}
		}
		pub fn set<T: From<Set>>(value: Vec<u8>) -> T {
			Set(value).into()
		}
		pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
			OrderByParam::Encoded(direction)
		}
		pub fn equals(value: Vec<u8>) -> WhereParam {
			WhereParam::Encoded(_prisma::read_filters::BytesFilter::Equals(value))
		}
		::prisma_client_rust::scalar_where_param_fns!(
			_prisma::read_filters::BytesFilter,
			Encoded,
			{
				fn in_vec(_: Vec<Vec<u8>>) -> InVec;
				fn not_in_vec(_: Vec<Vec<u8>>) -> NotInVec;
				fn not(_: Vec<u8>) -> Not;
			}
		);
		pub struct Include;
		impl Into<super::IncludeParam> for Include {
			fn into(self) -> super::IncludeParam {
				super::IncludeParam::Encoded(self)
			}
		}
		impl Include {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
		pub struct Select;
		impl Into<super::SelectParam> for Select {
			fn into(self) -> super::SelectParam {
				super::SelectParam::Encoded(self)
			}
		}
		impl Select {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
	}
	pub fn create(
		dest: String,
		encoded: Vec<u8>,
		_params: Vec<SetParam>,
	) -> (String, Vec<u8>, Vec<SetParam>) {
		(dest, encoded, _params)
	}
	pub fn create_unchecked(
		dest: String,
		encoded: Vec<u8>,
		_params: Vec<SetParam>,
	) -> (String, Vec<u8>, Vec<SetParam>) {
		(dest, encoded, _params)
	}
	#[macro_export]
	macro_rules ! _select_unprofitable_messages { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: unprofitable_messages :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: unprofitable_messages :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: unprofitable_messages :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: unprofitable_messages :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: unprofitable_messages :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: unprofitable_messages :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { id , dest , encoded } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : crate :: prisma :: unprofitable_messages :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: unprofitable_messages :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: unprofitable_messages :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: unprofitable_messages :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: unprofitable_messages :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: unprofitable_messages :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "dest" , "encoded"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: unprofitable_messages :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; id) => { i32 } ; (@ field_type ; dest) => { String } ; (@ field_type ; encoded) => { Vec < u8 > } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "UnprofitableMessages" , available relations are "id, dest, encoded")) } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; id) => { Into :: < crate :: prisma :: unprofitable_messages :: SelectParam > :: into (crate :: prisma :: unprofitable_messages :: id :: Select) } ; (@ selection_field_to_selection_param ; dest) => { Into :: < crate :: prisma :: unprofitable_messages :: SelectParam > :: into (crate :: prisma :: unprofitable_messages :: dest :: Select) } ; (@ selection_field_to_selection_param ; encoded) => { Into :: < crate :: prisma :: unprofitable_messages :: SelectParam > :: into (crate :: prisma :: unprofitable_messages :: encoded :: Select) } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: unprofitable_messages :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; dest) => { "dest" } ; (@ field_serde_name ; encoded) => { "encoded" } ; }
	pub use _select_unprofitable_messages as select;
	pub enum SelectParam {
		Id(id::Select),
		Dest(dest::Select),
		Encoded(encoded::Select),
	}
	impl SelectParam {
		pub fn to_selection(self) -> ::prisma_client_rust::Selection {
			match self {
				Self::Id(data) => data.to_selection(),
				Self::Dest(data) => data.to_selection(),
				Self::Encoded(data) => data.to_selection(),
			}
		}
	}
	#[macro_export]
	macro_rules ! _include_unprofitable_messages { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: unprofitable_messages :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: unprofitable_messages :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: unprofitable_messages :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: unprofitable_messages :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: unprofitable_messages :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: unprofitable_messages :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: unprofitable_messages :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: unprofitable_messages :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub id : i32 , pub dest : String , pub encoded : Vec < u8 > , $ (pub $ field : crate :: prisma :: unprofitable_messages :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (id) , stringify ! (dest) , stringify ! (encoded)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: unprofitable_messages :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: unprofitable_messages :: id :: NAME , & self . id) ? ; state . serialize_field (crate :: prisma :: unprofitable_messages :: dest :: NAME , & self . dest) ? ; state . serialize_field (crate :: prisma :: unprofitable_messages :: encoded :: NAME , & self . encoded) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , id , dest , encoded } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: unprofitable_messages :: $ field :: NAME) , + , crate :: prisma :: unprofitable_messages :: id :: NAME , crate :: prisma :: unprofitable_messages :: dest :: NAME , crate :: prisma :: unprofitable_messages :: encoded :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: unprofitable_messages :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: unprofitable_messages :: id :: NAME => Ok (Field :: id) , crate :: prisma :: unprofitable_messages :: dest :: NAME => Ok (Field :: dest) , crate :: prisma :: unprofitable_messages :: encoded :: NAME => Ok (Field :: encoded) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut id = None ; let mut dest = None ; let mut encoded = None ; while let Some (key) = map . next_key () ? { match key { Field :: id => { if id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: unprofitable_messages :: id :: NAME)) ; } id = Some (map . next_value () ?) ; } Field :: dest => { if dest . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: unprofitable_messages :: dest :: NAME)) ; } dest = Some (map . next_value () ?) ; } Field :: encoded => { if encoded . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: unprofitable_messages :: encoded :: NAME)) ; } encoded = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: unprofitable_messages :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: unprofitable_messages :: $ field :: NAME)) ? ;) * let id = id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: unprofitable_messages :: id :: NAME)) ? ; let dest = dest . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: unprofitable_messages :: dest :: NAME)) ? ; let encoded = encoded . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: unprofitable_messages :: encoded :: NAME)) ? ; Ok (Data { id , dest , encoded , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "dest" , "encoded"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: unprofitable_messages :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "UnprofitableMessages" , available relations are "")) } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: unprofitable_messages :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; dest) => { "dest" } ; (@ field_serde_name ; encoded) => { "encoded" } ; }
	pub use _include_unprofitable_messages as include;
	pub enum IncludeParam {
		Id(id::Include),
		Dest(dest::Include),
		Encoded(encoded::Include),
	}
	impl IncludeParam {
		pub fn to_selection(self) -> ::prisma_client_rust::Selection {
			match self {
				Self::Id(data) => data.to_selection(),
				Self::Dest(data) => data.to_selection(),
				Self::Encoded(data) => data.to_selection(),
			}
		}
	}
	#[macro_export]
	macro_rules ! _partial_unchecked_unprofitable_messages { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: unprofitable_messages struct $ struct_name { # [serde (rename = "id")] pub id : i32 , # [serde (rename = "dest")] pub dest : String , # [serde (rename = "encoded")] pub encoded : Vec < u8 > } [$ ($ scalar_field) , +] } } ; }
	pub use _partial_unchecked_unprofitable_messages as partial_unchecked;
	#[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
	pub struct Data {
		#[serde(rename = "id")]
		pub id: i32,
		#[serde(rename = "dest")]
		pub dest: String,
		#[serde(rename = "encoded")]
		pub encoded: Vec<u8>,
	}
	impl Data {}
	#[derive(Clone)]
	pub enum WithParam {}
	impl Into<::prisma_client_rust::Selection> for WithParam {
		fn into(self) -> ::prisma_client_rust::Selection {
			match self {}
		}
	}
	#[derive(Clone)]
	pub enum SetParam {
		SetId(i32),
		IncrementId(i32),
		DecrementId(i32),
		MultiplyId(i32),
		DivideId(i32),
		SetDest(String),
		SetEncoded(Vec<u8>),
	}
	impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
		fn from(param: SetParam) -> Self {
			match param {
				SetParam::SetId(value) =>
					(id::NAME.to_string(), ::prisma_client_rust::PrismaValue::Int(value as i64)),
				SetParam::IncrementId(value) => (
					id::NAME.to_string(),
					::prisma_client_rust::PrismaValue::Object(vec![(
						"increment".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
				),
				SetParam::DecrementId(value) => (
					id::NAME.to_string(),
					::prisma_client_rust::PrismaValue::Object(vec![(
						"decrement".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
				),
				SetParam::MultiplyId(value) => (
					id::NAME.to_string(),
					::prisma_client_rust::PrismaValue::Object(vec![(
						"multiply".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
				),
				SetParam::DivideId(value) => (
					id::NAME.to_string(),
					::prisma_client_rust::PrismaValue::Object(vec![(
						"divide".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
				),
				SetParam::SetDest(value) =>
					(dest::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(value)),
				SetParam::SetEncoded(value) =>
					(encoded::NAME.to_string(), ::prisma_client_rust::PrismaValue::Bytes(value)),
			}
		}
	}
	#[derive(Clone)]
	pub enum UncheckedSetParam {
		Id(i32),
		Dest(String),
		Encoded(Vec<u8>),
	}
	impl From<UncheckedSetParam> for SetParam {
		fn from(param: UncheckedSetParam) -> Self {
			match param {
				UncheckedSetParam::Id(value) => Self::SetId(value),
				UncheckedSetParam::Dest(value) => Self::SetDest(value),
				UncheckedSetParam::Encoded(value) => Self::SetEncoded(value),
			}
		}
	}
	#[derive(Clone)]
	pub enum OrderByParam {
		Id(::prisma_client_rust::Direction),
		Dest(::prisma_client_rust::Direction),
		Encoded(::prisma_client_rust::Direction),
	}
	impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
		fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
			match self {
				Self::Id(direction) => (
					id::NAME.to_string(),
					::prisma_client_rust::PrismaValue::String(direction.to_string()),
				),
				Self::Dest(direction) => (
					dest::NAME.to_string(),
					::prisma_client_rust::PrismaValue::String(direction.to_string()),
				),
				Self::Encoded(direction) => (
					encoded::NAME.to_string(),
					::prisma_client_rust::PrismaValue::String(direction.to_string()),
				),
			}
		}
	}
	#[derive(Clone)]
	pub enum WhereParam {
		Not(Vec<WhereParam>),
		Or(Vec<WhereParam>),
		And(Vec<WhereParam>),
		Id(_prisma::read_filters::IntFilter),
		Dest(_prisma::read_filters::StringFilter),
		Encoded(_prisma::read_filters::BytesFilter),
	}
	impl ::prisma_client_rust::WhereInput for WhereParam {
		fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
			let (name, value) = match self {
				Self::Not(value) => (
					"NOT",
					::prisma_client_rust::SerializedWhereValue::Object(
						::prisma_client_rust::merge_fields(
							value
								.into_iter()
								.map(::prisma_client_rust::WhereInput::serialize)
								.map(Into::into)
								.collect(),
						),
					),
				),
				Self::Or(value) => (
					"OR",
					::prisma_client_rust::SerializedWhereValue::List(
						value
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(Into::into)
							.map(|v| vec![v])
							.map(::prisma_client_rust::PrismaValue::Object)
							.collect(),
					),
				),
				Self::And(value) => (
					"AND",
					::prisma_client_rust::SerializedWhereValue::Object(
						::prisma_client_rust::merge_fields(
							value
								.into_iter()
								.map(::prisma_client_rust::WhereInput::serialize)
								.map(Into::into)
								.collect(),
						),
					),
				),
				Self::Id(value) => (id::NAME, value.into()),
				Self::Dest(value) => (dest::NAME, value.into()),
				Self::Encoded(value) => (encoded::NAME, value.into()),
			};
			::prisma_client_rust::SerializedWhereInput::new(name, value.into())
		}
	}
	#[derive(Clone)]
	pub enum UniqueWhereParam {
		IdEquals(i32),
	}
	impl From<UniqueWhereParam> for WhereParam {
		fn from(value: UniqueWhereParam) -> Self {
			match value {
				UniqueWhereParam::IdEquals(value) =>
					Self::Id(_prisma::read_filters::IntFilter::Equals(value)),
			}
		}
	}
	impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
		fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
			match op {
				::prisma_client_rust::Operator::Not(value) => Self::Not(value),
				::prisma_client_rust::Operator::And(value) => Self::And(value),
				::prisma_client_rust::Operator::Or(value) => Self::Or(value),
			}
		}
	}
	#[derive(Clone)]
	pub struct Types;
	impl ::prisma_client_rust::ModelTypes for Types {
		type Data = Data;
		type Where = WhereParam;
		type UncheckedSet = UncheckedSetParam;
		type Set = SetParam;
		type With = WithParam;
		type OrderBy = OrderByParam;
		type Cursor = UniqueWhereParam;
		const MODEL: &'static str = NAME;
		fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
			vec![
				::prisma_client_rust::sel(id::NAME),
				::prisma_client_rust::sel(dest::NAME),
				::prisma_client_rust::sel(encoded::NAME),
			]
		}
	}
	pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
	pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
	pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
	pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
	pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
	pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
	pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
	pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
	pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
	pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
	pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
	pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
	pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
	#[derive(Clone)]
	pub struct Actions<'a> {
		pub client: &'a ::prisma_client_rust::PrismaClientInternals,
	}
	impl<'a> Actions<'a> {
		pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
			FindUnique::new(self.client, _where.into())
		}
		pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
			FindFirst::new(self.client, _where)
		}
		pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
			FindMany::new(self.client, _where)
		}
		pub fn create(
			self,
			dest: String,
			encoded: Vec<u8>,
			mut _params: Vec<SetParam>,
		) -> Create<'a> {
			_params.extend([dest::set(dest), encoded::set(encoded)]);
			Create::new(self.client, _params)
		}
		pub fn create_unchecked(
			self,
			dest: String,
			encoded: Vec<u8>,
			mut _params: Vec<UncheckedSetParam>,
		) -> Create<'a> {
			_params.extend([dest::set(dest), encoded::set(encoded)]);
			Create::new(self.client, _params.into_iter().map(Into::into).collect())
		}
		pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
			Update::new(self.client, _where.into(), _params, vec![])
		}
		pub fn update_unchecked(
			self,
			_where: UniqueWhereParam,
			_params: Vec<UncheckedSetParam>,
		) -> Update<'a> {
			Update::new(
				self.client,
				_where.into(),
				_params.into_iter().map(Into::into).collect(),
				vec![],
			)
		}
		pub fn update_many(
			self,
			_where: Vec<WhereParam>,
			_params: Vec<SetParam>,
		) -> UpdateMany<'a> {
			UpdateMany::new(self.client, _where, _params)
		}
		pub fn upsert(
			self,
			_where: UniqueWhereParam,
			(dest, encoded, mut _params): (String, Vec<u8>, Vec<SetParam>),
			_update: Vec<SetParam>,
		) -> Upsert<'a> {
			_params.extend([dest::set(dest), encoded::set(encoded)]);
			Upsert::new(self.client, _where.into(), _params, _update)
		}
		pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
			Delete::new(self.client, _where.into(), vec![])
		}
		pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
			DeleteMany::new(self.client, _where)
		}
		pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
			Count::new(self.client, _where)
		}
		pub fn find_raw<T: ::prisma_client_rust::Data>(
			self,
		) -> ::prisma_client_rust::FindRaw<'a, Types, T> {
			::prisma_client_rust::FindRaw::new(self.client)
		}
		pub fn aggregate_raw<T: ::prisma_client_rust::Data>(
			self,
		) -> ::prisma_client_rust::AggregateRaw<'a, Types, T> {
			::prisma_client_rust::AggregateRaw::new(self.client)
		}
	}
}
pub mod _prisma {
	pub struct PrismaClientBuilder {
		url: Option<String>,
		action_notifier: ::prisma_client_rust::ActionNotifier,
	}
	impl PrismaClientBuilder {
		fn new() -> Self {
			Self { url: None, action_notifier: ::prisma_client_rust::ActionNotifier::new() }
		}
		pub fn with_url(mut self, url: String) -> Self {
			self.url = Some(url);
			self
		}
		pub async fn build(self) -> Result<PrismaClient, ::prisma_client_rust::NewClientError> {
			let internals = ::prisma_client_rust::PrismaClientInternals::new(
				self.url,
				self.action_notifier,
				super::DATAMODEL_STR,
			)
			.await?;
			Ok(PrismaClient(internals))
		}
	}
	pub struct PrismaClient(::prisma_client_rust::PrismaClientInternals);
	impl ::std::fmt::Debug for PrismaClient {
		fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
			f.debug_struct("PrismaClient").finish()
		}
	}
	impl PrismaClient {
		pub fn _builder() -> PrismaClientBuilder {
			PrismaClientBuilder::new()
		}
		pub fn _query_raw<T: ::prisma_client_rust::Data>(
			&self,
			query: ::prisma_client_rust::Raw,
		) -> ::prisma_client_rust::QueryRaw<T> {
			::prisma_client_rust::QueryRaw::new(&self.0, query, super::DATABASE_STR)
		}
		pub fn _execute_raw(
			&self,
			query: ::prisma_client_rust::Raw,
		) -> ::prisma_client_rust::ExecuteRaw {
			::prisma_client_rust::ExecuteRaw::new(&self.0, query, super::DATABASE_STR)
		}
		pub async fn _batch<
			'batch,
			T: ::prisma_client_rust::BatchContainer<'batch, Marker>,
			Marker,
		>(
			&self,
			queries: T,
		) -> ::prisma_client_rust::Result<
			<T as ::prisma_client_rust::BatchContainer<'batch, Marker>>::ReturnType,
		> {
			::prisma_client_rust::batch(queries, &self.0).await
		}
		pub fn _transaction(&self) -> ::prisma_client_rust::TransactionBuilder<Self> {
			::prisma_client_rust::TransactionBuilder::_new(self, &self.0)
		}
		pub async fn _migrate_deploy(
			&self,
		) -> Result<(), ::prisma_client_rust::migrations::MigrateDeployError> {
			let res = ::prisma_client_rust::migrations::migrate_deploy(
				super::DATAMODEL_STR,
				super::MIGRATIONS_DIR,
				&self.0.url(),
			)
			.await;
			::prisma_client_rust::tokio::time::sleep(core::time::Duration::from_millis(1)).await;
			res
		}
		pub async fn _migrate_resolve(
			&self,
			migration: &str,
		) -> Result<(), ::prisma_client_rust::migrations::MigrateResolveError> {
			::prisma_client_rust::migrations::migrate_resolve(
				migration,
				super::DATAMODEL_STR,
				super::MIGRATIONS_DIR,
				&self.0.url(),
			)
			.await
		}
		pub fn _db_push(&self) -> ::prisma_client_rust::migrations::DbPush {
			::prisma_client_rust::migrations::db_push(super::DATAMODEL_STR, &self.0.url())
		}
		pub fn deliveries(&self) -> super::deliveries::Actions {
			super::deliveries::Actions { client: &self.0 }
		}
		pub fn pending_withdrawal(&self) -> super::pending_withdrawal::Actions {
			super::pending_withdrawal::Actions { client: &self.0 }
		}
		pub fn unprofitable_messages(&self) -> super::unprofitable_messages::Actions {
			super::unprofitable_messages::Actions { client: &self.0 }
		}
	}
	impl ::prisma_client_rust::PrismaClient for PrismaClient {
		fn internals(&self) -> &::prisma_client_rust::PrismaClientInternals {
			&self.0
		}
		fn internals_mut(&mut self) -> &mut ::prisma_client_rust::PrismaClientInternals {
			&mut self.0
		}
		fn with_tx_id(&self, tx_id: Option<::prisma_client_rust::query_core::TxId>) -> Self {
			Self(self.0.with_tx_id(tx_id))
		}
	}
	#[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
	pub enum DeliveriesScalarFieldEnum {
		#[serde(rename = "id")]
		Id,
		#[serde(rename = "hash")]
		Hash,
		#[serde(rename = "source_chain")]
		SourceChain,
		#[serde(rename = "dest_chain")]
		DestChain,
		#[serde(rename = "delivery_type")]
		DeliveryType,
		#[serde(rename = "created_at")]
		CreatedAt,
		#[serde(rename = "height")]
		Height,
	}
	impl ToString for DeliveriesScalarFieldEnum {
		fn to_string(&self) -> String {
			match self {
				Self::Id => "id".to_string(),
				Self::Hash => "hash".to_string(),
				Self::SourceChain => "source_chain".to_string(),
				Self::DestChain => "dest_chain".to_string(),
				Self::DeliveryType => "delivery_type".to_string(),
				Self::CreatedAt => "created_at".to_string(),
				Self::Height => "height".to_string(),
			}
		}
	}
	#[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
	pub enum PendingWithdrawalScalarFieldEnum {
		#[serde(rename = "id")]
		Id,
		#[serde(rename = "dest")]
		Dest,
		#[serde(rename = "encoded")]
		Encoded,
	}
	impl ToString for PendingWithdrawalScalarFieldEnum {
		fn to_string(&self) -> String {
			match self {
				Self::Id => "id".to_string(),
				Self::Dest => "dest".to_string(),
				Self::Encoded => "encoded".to_string(),
			}
		}
	}
	#[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
	pub enum SortOrder {
		#[serde(rename = "asc")]
		Asc,
		#[serde(rename = "desc")]
		Desc,
	}
	impl ToString for SortOrder {
		fn to_string(&self) -> String {
			match self {
				Self::Asc => "asc".to_string(),
				Self::Desc => "desc".to_string(),
			}
		}
	}
	#[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
	pub enum TransactionIsolationLevel {
		#[serde(rename = "Serializable")]
		Serializable,
	}
	impl ToString for TransactionIsolationLevel {
		fn to_string(&self) -> String {
			match self {
				Self::Serializable => "Serializable".to_string(),
			}
		}
	}
	impl ::prisma_client_rust::TransactionIsolationLevel for TransactionIsolationLevel {}
	#[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
	pub enum UnprofitableMessagesScalarFieldEnum {
		#[serde(rename = "id")]
		Id,
		#[serde(rename = "dest")]
		Dest,
		#[serde(rename = "encoded")]
		Encoded,
	}
	impl ToString for UnprofitableMessagesScalarFieldEnum {
		fn to_string(&self) -> String {
			match self {
				Self::Id => "id".to_string(),
				Self::Dest => "dest".to_string(),
				Self::Encoded => "encoded".to_string(),
			}
		}
	}
	pub mod read_filters {
		#[derive(Clone)]
		pub enum IntFilter {
			Equals(i32),
			InVec(Vec<i32>),
			NotInVec(Vec<i32>),
			Lt(i32),
			Lte(i32),
			Gt(i32),
			Gte(i32),
			Not(i32),
		}
		impl Into<::prisma_client_rust::SerializedWhereValue> for IntFilter {
			fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
				match self {
					Self::Equals(value) =>
						::prisma_client_rust::SerializedWhereValue::Object(vec![(
							"equals".to_string(),
							::prisma_client_rust::PrismaValue::Int(value as i64),
						)]),
					Self::InVec(value) =>
						::prisma_client_rust::SerializedWhereValue::Object(vec![(
							"in".to_string(),
							::prisma_client_rust::PrismaValue::List(
								value
									.into_iter()
									.map(|value| {
										::prisma_client_rust::PrismaValue::Int(value as i64)
									})
									.collect(),
							),
						)]),
					Self::NotInVec(value) =>
						::prisma_client_rust::SerializedWhereValue::Object(vec![(
							"notIn".to_string(),
							::prisma_client_rust::PrismaValue::List(
								value
									.into_iter()
									.map(|value| {
										::prisma_client_rust::PrismaValue::Int(value as i64)
									})
									.collect(),
							),
						)]),
					Self::Lt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"lt".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
					Self::Lte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"lte".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
					Self::Gt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"gt".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
					Self::Gte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"gte".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
					Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"not".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
				}
			}
		}
		#[derive(Clone)]
		pub enum StringFilter {
			Equals(String),
			InVec(Vec<String>),
			NotInVec(Vec<String>),
			Lt(String),
			Lte(String),
			Gt(String),
			Gte(String),
			Contains(String),
			StartsWith(String),
			EndsWith(String),
			Not(String),
		}
		impl Into<::prisma_client_rust::SerializedWhereValue> for StringFilter {
			fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
				match self {
					Self::Equals(value) =>
						::prisma_client_rust::SerializedWhereValue::Object(vec![(
							"equals".to_string(),
							::prisma_client_rust::PrismaValue::String(value),
						)]),
					Self::InVec(value) =>
						::prisma_client_rust::SerializedWhereValue::Object(vec![(
							"in".to_string(),
							::prisma_client_rust::PrismaValue::List(
								value
									.into_iter()
									.map(|value| ::prisma_client_rust::PrismaValue::String(value))
									.collect(),
							),
						)]),
					Self::NotInVec(value) =>
						::prisma_client_rust::SerializedWhereValue::Object(vec![(
							"notIn".to_string(),
							::prisma_client_rust::PrismaValue::List(
								value
									.into_iter()
									.map(|value| ::prisma_client_rust::PrismaValue::String(value))
									.collect(),
							),
						)]),
					Self::Lt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"lt".to_string(),
						::prisma_client_rust::PrismaValue::String(value),
					)]),
					Self::Lte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"lte".to_string(),
						::prisma_client_rust::PrismaValue::String(value),
					)]),
					Self::Gt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"gt".to_string(),
						::prisma_client_rust::PrismaValue::String(value),
					)]),
					Self::Gte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"gte".to_string(),
						::prisma_client_rust::PrismaValue::String(value),
					)]),
					Self::Contains(value) =>
						::prisma_client_rust::SerializedWhereValue::Object(vec![(
							"contains".to_string(),
							::prisma_client_rust::PrismaValue::String(value),
						)]),
					Self::StartsWith(value) =>
						::prisma_client_rust::SerializedWhereValue::Object(vec![(
							"startsWith".to_string(),
							::prisma_client_rust::PrismaValue::String(value),
						)]),
					Self::EndsWith(value) =>
						::prisma_client_rust::SerializedWhereValue::Object(vec![(
							"endsWith".to_string(),
							::prisma_client_rust::PrismaValue::String(value),
						)]),
					Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"not".to_string(),
						::prisma_client_rust::PrismaValue::String(value),
					)]),
				}
			}
		}
		#[derive(Clone)]
		pub enum BytesFilter {
			Equals(Vec<u8>),
			InVec(Vec<Vec<u8>>),
			NotInVec(Vec<Vec<u8>>),
			Not(Vec<u8>),
		}
		impl Into<::prisma_client_rust::SerializedWhereValue> for BytesFilter {
			fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
				match self {
					Self::Equals(value) =>
						::prisma_client_rust::SerializedWhereValue::Object(vec![(
							"equals".to_string(),
							::prisma_client_rust::PrismaValue::Bytes(value),
						)]),
					Self::InVec(value) =>
						::prisma_client_rust::SerializedWhereValue::Object(vec![(
							"in".to_string(),
							::prisma_client_rust::PrismaValue::List(
								value
									.into_iter()
									.map(|value| ::prisma_client_rust::PrismaValue::Bytes(value))
									.collect(),
							),
						)]),
					Self::NotInVec(value) =>
						::prisma_client_rust::SerializedWhereValue::Object(vec![(
							"notIn".to_string(),
							::prisma_client_rust::PrismaValue::List(
								value
									.into_iter()
									.map(|value| ::prisma_client_rust::PrismaValue::Bytes(value))
									.collect(),
							),
						)]),
					Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"not".to_string(),
						::prisma_client_rust::PrismaValue::Bytes(value),
					)]),
				}
			}
		}
	}
}
pub use _prisma::*;

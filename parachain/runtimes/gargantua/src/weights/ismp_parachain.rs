// Copyright (C) Polytope Labs Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `ismp_parachain`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2024-12-15, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Akinloses-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// /Users/dharjeezy/Documents/polytope/hyperbridge/target/release/wbuild/gargantua-runtime/gargantua_runtime.compact.wasm
// --pallet
// ismp-parachain
// --all
// --steps
// 2
// --repeat
// 1
// --output
// ismp-parachain-weight.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions for `ismp_parachain`.
pub struct WeightInfo<T>(PhantomData<T>);

impl<T: frame_system::Config> ismp_parachain::WeightInfo for WeightInfo<T> {
    /// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
    /// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `IsmpParachain::Parachains` (r:0 w:100)
    /// Proof: `IsmpParachain::Parachains` (`max_values`: None, `max_size`: Some(12), added: 2487, mode: `MaxEncodedLen`)
    /// Storage: `Ismp::ChallengePeriod` (r:0 w:100)
    /// Proof: `Ismp::ChallengePeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `n` is `[1, 100]`.
    fn add_parachain(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `1489`
        // Minimum execution time: 8_000_000 picoseconds.
        Weight::from_parts(4_785_858, 0)
            .saturating_add(Weight::from_parts(0, 1489))
            // Standard Error: 1_391
            .saturating_add(Weight::from_parts(3_694_141, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(n.into())))
    }
    /// Storage: `IsmpParachain::Parachains` (r:0 w:5)
    /// Proof: `IsmpParachain::Parachains` (`max_values`: None, `max_size`: Some(12), added: 2487, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[1, 100]`.
    fn remove_parachain(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_000_000 picoseconds.
        Weight::from_parts(10_994_949, 0)
            .saturating_add(Weight::from_parts(0, 0))
            // Standard Error: 721
            .saturating_add(Weight::from_parts(5_050, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: `IsmpParachain::ConsensusUpdated` (r:1 w:0)
    /// Proof: `IsmpParachain::ConsensusUpdated` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
    /// Storage: `Ismp::ConsensusStateClient` (r:1 w:0)
    /// Proof: `Ismp::ConsensusStateClient` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Ismp::ConsensusStates` (r:1 w:1)
    /// Proof: `Ismp::ConsensusStates` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Ismp::FrozenConsensusClients` (r:1 w:0)
    /// Proof: `Ismp::FrozenConsensusClients` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `Ismp::UnbondingPeriod` (r:1 w:0)
    /// Proof: `Ismp::UnbondingPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Ismp::ConsensusClientUpdateTime` (r:1 w:1)
    /// Proof: `Ismp::ConsensusClientUpdateTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `IsmpParachain::RelayChainStateCommitments` (r:1 w:0)
    /// Proof: `IsmpParachain::RelayChainStateCommitments` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
    /// Storage: `ParachainSystem::ValidationData` (r:1 w:0)
    /// Proof: `ParachainSystem::ValidationData` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `IsmpParachain::Parachains` (r:2 w:0)
    /// Proof: `IsmpParachain::Parachains` (`max_values`: None, `max_size`: Some(12), added: 2487, mode: `MaxEncodedLen`)
    /// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
    /// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Ismp::LatestStateMachineHeight` (r:1 w:1)
    /// Proof: `Ismp::LatestStateMachineHeight` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Ismp::StateCommitments` (r:1 w:1)
    /// Proof: `Ismp::StateCommitments` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Ismp::StateMachineUpdateTime` (r:0 w:1)
    /// Proof: `Ismp::StateMachineUpdateTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: UNKNOWN KEY `0x7374617465c5e35c1ebc4a47117ca326df225ec6be34a190413187eb4e5f91af` (r:1 w:1)
    /// Proof: UNKNOWN KEY `0x7374617465c5e35c1ebc4a47117ca326df225ec6be34a190413187eb4e5f91af` (r:1 w:1)
    fn update_parachain_consensus() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `15`
        //  Estimated: `5964`
        // Minimum execution time: 10_000_000 picoseconds.
        Weight::from_parts(11_000_000, 0)
            .saturating_add(Weight::from_parts(0, 5964))
            .saturating_add(T::DbWeight::get().reads(2))
    }
}

// Copyright (C) Polytope Labs Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


//! Autogenerated weights for `pallet_collective`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-02-03, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `polytope-labs`, CPU: `AMD Ryzen Threadripper PRO 5995WX 64-Cores`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// target/release/hyperbridge
// benchmark
// pallet
// --wasm-execution=compiled
// --pallet=pallet_collective
// --extrinsic=*
// --steps=50
// --repeat=20
// --unsafe-overwrite-results
// --genesis-builder-preset=development
// --template=./scripts/template.hbs
// --genesis-builder=runtime
// --runtime=./target/release/wbuild/gargantua-runtime/gargantua_runtime.compact.wasm
// --output=parachain/runtimes/gargantua/src/weights/pallet_collective.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use polkadot_sdk::*;
use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_collective`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::WeightInfo for WeightInfo<T> {
	/// Storage: `TechnicalCollective::Members` (r:1 w:1)
	/// Proof: `TechnicalCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Proposals` (r:1 w:0)
	/// Proof: `TechnicalCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Voting` (r:100 w:100)
	/// Proof: `TechnicalCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Prime` (r:0 w:1)
	/// Proof: `TechnicalCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[0, 10]`.
	/// The range of component `n` is `[0, 10]`.
	/// The range of component `p` is `[0, 100]`.
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (3232 ±0) + p * (309 ±0)`
		//  Estimated: `7119 + m * (1848 ±21) + p * (2643 ±2)`
		// Minimum execution time: 11_101_000 picoseconds.
		Weight::from_parts(11_492_000, 0)
			.saturating_add(Weight::from_parts(0, 7119))
			// Standard Error: 412_251
			.saturating_add(Weight::from_parts(11_219_797, 0).saturating_mul(m.into()))
			// Standard Error: 42_138
			.saturating_add(Weight::from_parts(3_928_924, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 1848).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 2643).saturating_mul(p.into()))
	}
	/// Storage: `TechnicalCollective::Members` (r:1 w:0)
	/// Proof: `TechnicalCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 10]`.
	fn execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `104 + m * (32 ±0)`
		//  Estimated: `1588 + m * (32 ±0)`
		// Minimum execution time: 14_868_000 picoseconds.
		Weight::from_parts(15_884_796, 0)
			.saturating_add(Weight::from_parts(0, 1588))
			// Standard Error: 93
			.saturating_add(Weight::from_parts(2_311, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
	}
	/// Storage: `TechnicalCollective::Members` (r:1 w:0)
	/// Proof: `TechnicalCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::ProposalOf` (r:1 w:0)
	/// Proof: `TechnicalCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 10]`.
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `104 + m * (32 ±0)`
		//  Estimated: `3568 + m * (32 ±0)`
		// Minimum execution time: 18_505_000 picoseconds.
		Weight::from_parts(19_121_205, 0)
			.saturating_add(Weight::from_parts(0, 3568))
			// Standard Error: 69
			.saturating_add(Weight::from_parts(2_025, 0).saturating_mul(b.into()))
			// Standard Error: 7_481
			.saturating_add(Weight::from_parts(35_242, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
	}
	/// Storage: `TechnicalCollective::Members` (r:1 w:0)
	/// Proof: `TechnicalCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::ProposalOf` (r:1 w:1)
	/// Proof: `TechnicalCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Proposals` (r:1 w:1)
	/// Proof: `TechnicalCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::ProposalCount` (r:1 w:1)
	/// Proof: `TechnicalCollective::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Voting` (r:0 w:1)
	/// Proof: `TechnicalCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 10]`.
	/// The range of component `p` is `[1, 100]`.
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `482 + m * (32 ±0) + p * (35 ±0)`
		//  Estimated: `3797 + m * (40 ±0) + p * (36 ±0)`
		// Minimum execution time: 25_138_000 picoseconds.
		Weight::from_parts(27_014_694, 0)
			.saturating_add(Weight::from_parts(0, 3797))
			// Standard Error: 186
			.saturating_add(Weight::from_parts(3_610, 0).saturating_mul(b.into()))
			// Standard Error: 22_101
			.saturating_add(Weight::from_parts(97_374, 0).saturating_mul(m.into()))
			// Standard Error: 1_923
			.saturating_add(Weight::from_parts(154_178, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
	}
	/// Storage: `TechnicalCollective::Members` (r:1 w:0)
	/// Proof: `TechnicalCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Voting` (r:1 w:1)
	/// Proof: `TechnicalCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[5, 10]`.
	fn vote(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `974 + m * (64 ±0)`
		//  Estimated: `4439 + m * (64 ±0)`
		// Minimum execution time: 24_186_000 picoseconds.
		Weight::from_parts(24_588_712, 0)
			.saturating_add(Weight::from_parts(0, 4439))
			// Standard Error: 11_563
			.saturating_add(Weight::from_parts(81_748, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 64).saturating_mul(m.into()))
	}
	/// Storage: `TechnicalCollective::Voting` (r:1 w:1)
	/// Proof: `TechnicalCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Members` (r:1 w:0)
	/// Proof: `TechnicalCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Proposals` (r:1 w:1)
	/// Proof: `TechnicalCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::ProposalOf` (r:0 w:1)
	/// Proof: `TechnicalCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 10]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `397 + m * (64 ±0) + p * (36 ±0)`
		//  Estimated: `3824 + m * (77 ±1) + p * (37 ±0)`
		// Minimum execution time: 24_957_000 picoseconds.
		Weight::from_parts(28_327_046, 0)
			.saturating_add(Weight::from_parts(0, 3824))
			// Standard Error: 2_409
			.saturating_add(Weight::from_parts(173_152, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 77).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 37).saturating_mul(p.into()))
	}
	/// Storage: `TechnicalCollective::Voting` (r:1 w:1)
	/// Proof: `TechnicalCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Members` (r:1 w:0)
	/// Proof: `TechnicalCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::ProposalOf` (r:1 w:1)
	/// Proof: `TechnicalCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Proposals` (r:1 w:1)
	/// Proof: `TechnicalCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 10]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `742 + b * (1 ±0) + m * (64 ±0) + p * (40 ±0)`
		//  Estimated: `4331 + b * (1 ±0) + m * (44 ±2) + p * (41 ±0)`
		// Minimum execution time: 35_027_000 picoseconds.
		Weight::from_parts(34_061_187, 0)
			.saturating_add(Weight::from_parts(0, 4331))
			// Standard Error: 294
			.saturating_add(Weight::from_parts(3_477, 0).saturating_mul(b.into()))
			// Standard Error: 45_527
			.saturating_add(Weight::from_parts(213_643, 0).saturating_mul(m.into()))
			// Standard Error: 3_038
			.saturating_add(Weight::from_parts(201_624, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 44).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 41).saturating_mul(p.into()))
	}
	/// Storage: `TechnicalCollective::Voting` (r:1 w:1)
	/// Proof: `TechnicalCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Members` (r:1 w:0)
	/// Proof: `TechnicalCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Prime` (r:1 w:0)
	/// Proof: `TechnicalCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Proposals` (r:1 w:1)
	/// Proof: `TechnicalCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::ProposalOf` (r:0 w:1)
	/// Proof: `TechnicalCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 10]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `417 + m * (64 ±0) + p * (36 ±0)`
		//  Estimated: `3844 + m * (77 ±1) + p * (37 ±0)`
		// Minimum execution time: 26_971_000 picoseconds.
		Weight::from_parts(28_446_923, 0)
			.saturating_add(Weight::from_parts(0, 3844))
			// Standard Error: 24_476
			.saturating_add(Weight::from_parts(158_819, 0).saturating_mul(m.into()))
			// Standard Error: 1_628
			.saturating_add(Weight::from_parts(167_598, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 77).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 37).saturating_mul(p.into()))
	}
	/// Storage: `TechnicalCollective::Voting` (r:1 w:1)
	/// Proof: `TechnicalCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Members` (r:1 w:0)
	/// Proof: `TechnicalCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Prime` (r:1 w:0)
	/// Proof: `TechnicalCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::ProposalOf` (r:1 w:1)
	/// Proof: `TechnicalCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Proposals` (r:1 w:1)
	/// Proof: `TechnicalCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 10]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `762 + b * (1 ±0) + m * (64 ±0) + p * (40 ±0)`
		//  Estimated: `4351 + b * (1 ±0) + m * (44 ±2) + p * (41 ±0)`
		// Minimum execution time: 37_090_000 picoseconds.
		Weight::from_parts(45_602_984, 0)
			.saturating_add(Weight::from_parts(0, 4351))
			// Standard Error: 296
			.saturating_add(Weight::from_parts(2_811, 0).saturating_mul(b.into()))
			// Standard Error: 3_056
			.saturating_add(Weight::from_parts(203_633, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 44).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 41).saturating_mul(p.into()))
	}
	/// Storage: `TechnicalCollective::Proposals` (r:1 w:1)
	/// Proof: `TechnicalCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Voting` (r:0 w:1)
	/// Proof: `TechnicalCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::ProposalOf` (r:0 w:1)
	/// Proof: `TechnicalCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[1, 100]`.
	fn disapprove_proposal(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `260 + p * (32 ±0)`
		//  Estimated: `1745 + p * (32 ±0)`
		// Minimum execution time: 16_040_000 picoseconds.
		Weight::from_parts(16_890_728, 0)
			.saturating_add(Weight::from_parts(0, 1745))
			// Standard Error: 2_092
			.saturating_add(Weight::from_parts(163_835, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(p.into()))
	}
}

// Copyright (C) Polytope Labs Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
pragma solidity 0.8.20;

import "forge-std/Test.sol";
import {SP1Verifier} from "@sp1-contracts/v4.0.0-rc.3/SP1VerifierGroth16.sol";
import {ISP1Verifier} from "@sp1-contracts/ISP1Verifier.sol";

import "../src/consensus/SP1Beefy.sol";

contract SP1BeefyTest is Test {
    SP1Verifier internal sp1;

    function setUp() public virtual {
        sp1 = new SP1Verifier();
    }

    function testAbiDecode() public {
        bytes
            memory encoded = hex"000000000000000000000000000000000000000000000000000000000160c36c00000000000000000000000000000000000000000000000000000000000005d60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000160c36b97834c42788ee64ebc661ca927adb2df9e7964a91c61ccd54f542022ad27952100000000000000000000000000000000000000000000000000000000000005d70000000000000000000000000000000000000000000000000000000000000190a2f65237d65bf11eaf9883b0c994bc18a95ab47b43b572d7aff843b432973c9b7e2a5acf19da2d1c1f1e90c951fd996299699edf011464d0976a0b613b00411200000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000340000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000d270000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000012bacef909d9f380defaf3b43b063bbcca5894af6a9aeecf2f4f40954da066ca7b76ad993003005b4528466a4054871fcdaf62d951478b3c9fadfa7e9a1d176dc65455357251ca64fad2022f40c2bbf8f757595fa2f7f795417649d978e008b79ee6fac9942100661757261201b9d970800000000045250535290729cb4381d686b46b93fe119aa9fa0523498e73530fae930da8ec417e066d362a20d83050449534d5001010000000000000000000000000000000000000000000000000000000000000000bc36789e7a1e281436464229828f817d6612f7b477d66591ff96a9e064bcc98a05617572610101cac07fddba00a5cfcdb310f1612f7b10f01517f66aa9d74491eff3984ddd6f576f5cfee93c5cffe3f8b872ecae278dd7791624a439214f66620ea3d2a19852820000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104090690900a331610accb89fe31c04e9d4e0af42b9a99c946330fa6955af1254eb86aa8d3156ad94ef914c0f0901e9226264c7ebbd95145ec8e4a49dca2d348300d1fff3f19cd79389cd6fa52de5d8b0dfe2d60e5d53f7c706c0568c46dfc19c7bb232a951b01fc65f1360369a2ac0c50bbb41163127840d1dedc2e3f6ee98338bd59c7b81e8ea4f720ca1a2b9f7207e27ccb833c4965503a47e4fa62ea5e419555bfdd6421af119e05ad9e13adc643de98945d29f6a6b8d2a470a218e4a2abc9092b693618e7ecf7e780dbe7580bccfe2d5be334035c7ac5361d435cbc760c7896290f7b2b109a2dbe6c47e8401ab119a2da052fb3c0933f3e1669a59437bd8bc8dc157b00000000000000000000000000000000000000000000000000000000";

        BeefyConsensusState memory state = BeefyConsensusState({
            latestHeight: 0,
            beefyActivationBlock: 0,
            currentAuthoritySet: AuthoritySetCommitment({
                id: 1494,
                len: 400,
                root: bytes32(0xa2f65237d65bf11eaf9883b0c994bc18a95ab47b43b572d7aff843b432973c9b)
            }),
            nextAuthoritySet: AuthoritySetCommitment({
                id: 1495,
                len: 400,
                root: bytes32(0xa2f65237d65bf11eaf9883b0c994bc18a95ab47b43b572d7aff843b432973c9b)
            })
        });

        SP1Beefy sp1Beefy = new SP1Beefy(sp1);
        sp1Beefy.verifyConsensus(abi.encode(state), encoded);
    }

    function testPolkadotVerifier() public view {
        bytes
            memory proof = hex"11b6a09d0602783a739ff23a34879d0f31c9742293407605ad35b2ab9f2112445436251c2929a1f895ee9c0a7185734a57da30feaa42de756ef44ac2383ad0146f525ed41ea56e5485fe3d329cec126256c2c19918560e93fea6e69d6c1287aba55359e020f8368e1be185cabcaf87407e6e700be708bb4f0e3d800fea43e7e06f95d8a7141f29d97bbdec0ead4c051dc1a8ff931bf470e7f48bf8edba580d1a1e7f93bf2c7fc4b3124ccbbcaa0cb0243a3be77001d71fc4eb020bfce79d88ce520a9cf611b8032714b5f7429e0bd89c76474f67e0b8f02c0a1cc9fd3cbc8fdf6039a89904236d309f7153c388b5c66d5e5bdc484f4272b71aa246b121bbac05fd50bbe5";

        bytes
            memory publicInputs = hex"00000000000000000000000000000000000000000000000000000000000000209b5eebd2ca5ae7248ba20456bd8866e6a233ea23c4079303c5b19971f05c40c900000000000000000000000000000000000000000000000000000000000001f38055badaa1bf16bbbb8cd6fe066815bb9e1f23ae46d9641cb88d88aeff1b9569000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000016482008a0af7995d30781c057b8decb26eac6bcebf646283fe386a919b833822";

        bytes32 verificationKey = bytes32(0x004609733a0366baf52880d2a058a858c8c83479d4b1fca39c1a14666375419f);

        ISP1Verifier(address(sp1)).verifyProof(verificationKey, publicInputs, proof);

        PublicInputs memory inputs = abi.decode(publicInputs, (PublicInputs));

        console.log("authority: ");
        console.logBytes32(inputs.authorities_root);

        console.log("MMR Leaf: ");
        console.logBytes32(inputs.leaf_hash);

        console.log("authority length: ");
        console.log(inputs.authorities_len);
    }
}

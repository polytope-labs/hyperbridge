
//! Autogenerated weights for `pallet_collective`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-02-03, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `polytope-labs`, CPU: `AMD Ryzen Threadripper PRO 5995WX 64-Cores`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// target/release/hyperbridge
// benchmark
// pallet
// --wasm-execution=compiled
// --pallet=pallet_collective
// --extrinsic=*
// --steps=50
// --repeat=20
// --unsafe-overwrite-results
// --genesis-builder-preset=development
// --template=./scripts/template.hbs
// --genesis-builder=runtime
// --runtime=./target/release/wbuild/nexus-runtime/nexus_runtime.compact.wasm
// --output
// parachain/runtimes/nexus/src/weights/pallet_collective.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use polkadot_sdk::*;
use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_collective`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::WeightInfo for WeightInfo<T> {
	/// Storage: `TechnicalCollective::Members` (r:1 w:1)
	/// Proof: `TechnicalCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Proposals` (r:1 w:0)
	/// Proof: `TechnicalCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Voting` (r:100 w:100)
	/// Proof: `TechnicalCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Prime` (r:0 w:1)
	/// Proof: `TechnicalCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[0, 10]`.
	/// The range of component `n` is `[0, 10]`.
	/// The range of component `p` is `[0, 100]`.
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (3232 ±0) + p * (309 ±0)`
		//  Estimated: `7152 + m * (1848 ±21) + p * (2643 ±2)`
		// Minimum execution time: 11_361_000 picoseconds.
		Weight::from_parts(11_602_000, 0)
			.saturating_add(Weight::from_parts(0, 7152))
			// Standard Error: 451_194
			.saturating_add(Weight::from_parts(13_206_492, 0).saturating_mul(m.into()))
			// Standard Error: 46_119
			.saturating_add(Weight::from_parts(3_988_229, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 1848).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 2643).saturating_mul(p.into()))
	}
	/// Storage: `TechnicalCollective::Members` (r:1 w:0)
	/// Proof: `TechnicalCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 10]`.
	fn execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `137 + m * (32 ±0)`
		//  Estimated: `1621 + m * (32 ±0)`
		// Minimum execution time: 17_273_000 picoseconds.
		Weight::from_parts(17_521_926, 0)
			.saturating_add(Weight::from_parts(0, 1621))
			// Standard Error: 24
			.saturating_add(Weight::from_parts(2_596, 0).saturating_mul(b.into()))
			// Standard Error: 2_571
			.saturating_add(Weight::from_parts(13_498, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
	}
	/// Storage: `TechnicalCollective::Members` (r:1 w:0)
	/// Proof: `TechnicalCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::ProposalOf` (r:1 w:0)
	/// Proof: `TechnicalCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 10]`.
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `137 + m * (32 ±0)`
		//  Estimated: `3601 + m * (32 ±0)`
		// Minimum execution time: 20_910_000 picoseconds.
		Weight::from_parts(22_825_296, 0)
			.saturating_add(Weight::from_parts(0, 3601))
			// Standard Error: 93
			.saturating_add(Weight::from_parts(1_491, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
	}
	/// Storage: `TechnicalCollective::Members` (r:1 w:0)
	/// Proof: `TechnicalCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::ProposalOf` (r:1 w:1)
	/// Proof: `TechnicalCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Proposals` (r:1 w:1)
	/// Proof: `TechnicalCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::ProposalCount` (r:1 w:1)
	/// Proof: `TechnicalCollective::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Voting` (r:0 w:1)
	/// Proof: `TechnicalCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 10]`.
	/// The range of component `p` is `[1, 100]`.
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `515 + m * (32 ±0) + p * (35 ±0)`
		//  Estimated: `3830 + m * (40 ±0) + p * (36 ±0)`
		// Minimum execution time: 28_805_000 picoseconds.
		Weight::from_parts(28_772_341, 0)
			.saturating_add(Weight::from_parts(0, 3830))
			// Standard Error: 295
			.saturating_add(Weight::from_parts(2_520, 0).saturating_mul(b.into()))
			// Standard Error: 35_028
			.saturating_add(Weight::from_parts(114_914, 0).saturating_mul(m.into()))
			// Standard Error: 3_049
			.saturating_add(Weight::from_parts(175_208, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
	}
	/// Storage: `TechnicalCollective::Members` (r:1 w:0)
	/// Proof: `TechnicalCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Voting` (r:1 w:1)
	/// Proof: `TechnicalCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[5, 10]`.
	fn vote(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1007 + m * (64 ±0)`
		//  Estimated: `4472 + m * (64 ±0)`
		// Minimum execution time: 24_667_000 picoseconds.
		Weight::from_parts(25_644_814, 0)
			.saturating_add(Weight::from_parts(0, 4472))
			// Standard Error: 24_539
			.saturating_add(Weight::from_parts(112_286, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 64).saturating_mul(m.into()))
	}
	/// Storage: `TechnicalCollective::Voting` (r:1 w:1)
	/// Proof: `TechnicalCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Members` (r:1 w:0)
	/// Proof: `TechnicalCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Proposals` (r:1 w:1)
	/// Proof: `TechnicalCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::ProposalOf` (r:0 w:1)
	/// Proof: `TechnicalCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 10]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `430 + m * (64 ±0) + p * (36 ±0)`
		//  Estimated: `3857 + m * (77 ±1) + p * (37 ±0)`
		// Minimum execution time: 24_898_000 picoseconds.
		Weight::from_parts(25_732_000, 0)
			.saturating_add(Weight::from_parts(0, 3857))
			// Standard Error: 37_274
			.saturating_add(Weight::from_parts(246_791, 0).saturating_mul(m.into()))
			// Standard Error: 2_479
			.saturating_add(Weight::from_parts(181_757, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 77).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 37).saturating_mul(p.into()))
	}
	/// Storage: `TechnicalCollective::Voting` (r:1 w:1)
	/// Proof: `TechnicalCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Members` (r:1 w:0)
	/// Proof: `TechnicalCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::ProposalOf` (r:1 w:1)
	/// Proof: `TechnicalCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Proposals` (r:1 w:1)
	/// Proof: `TechnicalCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 10]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `775 + b * (1 ±0) + m * (64 ±0) + p * (40 ±0)`
		//  Estimated: `4364 + b * (1 ±0) + m * (44 ±2) + p * (41 ±0)`
		// Minimum execution time: 35_297_000 picoseconds.
		Weight::from_parts(40_795_977, 0)
			.saturating_add(Weight::from_parts(0, 4364))
			// Standard Error: 253
			.saturating_add(Weight::from_parts(891, 0).saturating_mul(b.into()))
			// Standard Error: 2_613
			.saturating_add(Weight::from_parts(183_362, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 44).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 41).saturating_mul(p.into()))
	}
	/// Storage: `TechnicalCollective::Voting` (r:1 w:1)
	/// Proof: `TechnicalCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Members` (r:1 w:0)
	/// Proof: `TechnicalCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Prime` (r:1 w:0)
	/// Proof: `TechnicalCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Proposals` (r:1 w:1)
	/// Proof: `TechnicalCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::ProposalOf` (r:0 w:1)
	/// Proof: `TechnicalCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 10]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `450 + m * (64 ±0) + p * (36 ±0)`
		//  Estimated: `3877 + m * (77 ±1) + p * (37 ±0)`
		// Minimum execution time: 27_843_000 picoseconds.
		Weight::from_parts(27_968_034, 0)
			.saturating_add(Weight::from_parts(0, 3877))
			// Standard Error: 38_816
			.saturating_add(Weight::from_parts(313_611, 0).saturating_mul(m.into()))
			// Standard Error: 2_582
			.saturating_add(Weight::from_parts(180_712, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 77).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 37).saturating_mul(p.into()))
	}
	/// Storage: `TechnicalCollective::Voting` (r:1 w:1)
	/// Proof: `TechnicalCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Members` (r:1 w:0)
	/// Proof: `TechnicalCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Prime` (r:1 w:0)
	/// Proof: `TechnicalCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::ProposalOf` (r:1 w:1)
	/// Proof: `TechnicalCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Proposals` (r:1 w:1)
	/// Proof: `TechnicalCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 10]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `795 + b * (1 ±0) + m * (64 ±0) + p * (40 ±0)`
		//  Estimated: `4384 + b * (1 ±0) + m * (44 ±2) + p * (41 ±0)`
		// Minimum execution time: 38_282_000 picoseconds.
		Weight::from_parts(46_767_596, 0)
			.saturating_add(Weight::from_parts(0, 4384))
			// Standard Error: 356
			.saturating_add(Weight::from_parts(1_093, 0).saturating_mul(b.into()))
			// Standard Error: 3_670
			.saturating_add(Weight::from_parts(207_006, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 44).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 41).saturating_mul(p.into()))
	}
	/// Storage: `TechnicalCollective::Proposals` (r:1 w:1)
	/// Proof: `TechnicalCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::Voting` (r:0 w:1)
	/// Proof: `TechnicalCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCollective::ProposalOf` (r:0 w:1)
	/// Proof: `TechnicalCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[1, 100]`.
	fn disapprove_proposal(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `293 + p * (32 ±0)`
		//  Estimated: `1778 + p * (32 ±0)`
		// Minimum execution time: 16_431_000 picoseconds.
		Weight::from_parts(17_088_059, 0)
			.saturating_add(Weight::from_parts(0, 1778))
			// Standard Error: 1_822
			.saturating_add(Weight::from_parts(170_028, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(p.into()))
	}

	fn release_proposal_cost() -> Weight {
		Default::default()
	}

	fn kill(_d: u32, _p: u32, ) -> Weight {
		Default::default()
	}
}

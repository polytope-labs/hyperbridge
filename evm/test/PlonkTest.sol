// Copyright (C) Polytope Labs Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
pragma solidity 0.8.17;

import "forge-std/Test.sol";
import {KusamaVerifier} from "../src/consensus/verifiers/KusamaVerifier.sol";
import {PolkadotVerifier} from "../src/consensus/verifiers/PolkadotVerifier.sol";
import {RococoVerifier} from "../src/consensus/verifiers/RococoVerifier.sol";
import {ZkBeefyV1} from "../src/consensus/ZkBeefy.sol";

contract PlonkTest is Test {
    KusamaVerifier internal kusama;
    PolkadotVerifier internal polkadot;
    RococoVerifier internal rococo;

    function setUp() public virtual {
        kusama = new KusamaVerifier();
        polkadot = new PolkadotVerifier();
        rococo = new RococoVerifier();
    }

    function testKusamaVerifier() public view {
        bytes memory proof =
            hex"1df9452144aa7b7d66c55bae5bd5eab85ee066acabbd4d2c8b0827188407aa0527d806c08671968e4462a856e6aa668ae3d945419c49dc113534c47e4284fd8e206b54ac92c850ad33d3000417827da20b53c7d74d506ad3ece5cf752a69cc4b029511fdf73fdcc45e13821abb8d74da38a5e55ce52eeb781958109cb5042b50212d66680e7f0da498967c3e0d87ae6ec3b9efa1993c05ed3986b98a5b93ad6f07a59886044c1a82b7a220e0f99f965a10afabe60e3464416e580ba3d2ec18e61bdf48f16665ca9db54254554abe9b896943d630f46adf2fa9ffebaa023708e827584edcdb771402e92b18c6590363dca7fd1763aedf0c694b66cc700742cb1e1389fb2fe05cf0b670ce5712cb644d8e3098d2cd3ee5d6e014efd08c63b0db120c24a785a773b50ea9bd21511863df16efb2201e5e3db55c5493bc3746767e822a61d67f17c4b758bdeeb3bde4b384dfb890b5ab8e019de21c51f3f2816f18501ea53254fe46428d493a83f78eb350f7c838eaff870e79567dfa7ccd7f47d4602f0d9770c520576030b69a7d64d6f4fe2a47b34f5eadf349b201e21fe5718dd20287e4185990dc46b7378124a4336c1cc3eb80eef7bada17f72d744e44d838410c94fc09a3f69d7ccd3404ef352c15fb4e9e9975de20677f6fb9df9dcfc939bc1e816c7cc1c62f804c73cbe42f6bc2551dd4aa31a44d895a4aa33bdc199fe2f7057c2a9884f8490e04582f39529d618ac7e6bcbdebd8173c0ae286fdeadbbbb81dfe6ad80e3fb25848790697a46eec429732c10c54e1ab00fcffdb6768e69c6825440e19e51d791737a8bfaeb81738eece3e7d316859d9b4020792e0a77a206011263430e1f286bd25edd470b17a846fe55ad538624ed8dd5e1e7eb64157722e1cd75a7c8f2a5792293ed7dca487abc69ffd3b1e2c54fab76827a342be69491f063d704aa84ec3f869c54e85a95bd4e3b1a5c750256a32bc944383c8278ae7cc11401a7ad8dc603e6f032dd3296f5680cfe893cd55d1ea38928d781dd5dbac9c2d1577d9516c08ade4a876b5548e7db28546ab0c572ab43040ba6ee37e950d57148a872d8048e403a62ab3f490958ab34bfdef04486e17d8aa36e533218ebde303834d81ec1a8a148d7a28d5326c2d55a79752068d91914b72bf6a8c79d755b70a4686c06f4f5c9b221035070815f3184964374bffb0db1e42d15c0d4b9e397003ae19a010f9407166adb046208620a7c4ab3170356331f024f7fec9b1aa742d29a492f6697489b5b103fb047543bcab1f9d07f3176f1a08d6c075239117e4740801859151972d764e76d8857439b79e8198a5a177eaab243c5cefa402ca6ff51dafa15898b80a69b46bfdca8d9be5cd7c62637c3b9e0f1ae27976eb0e1475d31e2417d56c50b78815c56b1e6f8f47c601722e167cfbc13a7064128d624ad9891cd6fae2f4a958e8b882e0597ed11290229cfc38bd36d44de76d9edada6331a90e2b192492448b014b5842e33cf4a67c76defeffe57cfacb27a443979ace513405a5fd41d1683c98fef0a8274f10c9990e79e5ffe19316e3341c2b1310dfa3b121de8b32cc89a65dd968bfdf94c85783d55756934d92b55ac1413bc0e5d7f94220a98ff92da395460b868274bf87910e507f7ebc02fc615379ae4c6c4e0455ac08d596e12a44d5e86b99c8419f77944c406befbd7296d882f4a93af35b7030262a6556d55bef040ca123279e7fd0963d636f48a0d47fe814db3b84f919b261a41b1d61bcd284f62994a70ef950cdf74a73abb70e76b59d9aec569a09e4b46bb20a5e34d45f105277d0260e21884f98af40d9da0d1d9a3220719e60095fc83e83113e9fd549a576807cb93ea04bf9072f077c7d88b076d4dc9f0f5aaed54a5b930a63ea9d771ec2fb2aea2f95ffba37df5ba9b4be9b983d182306d4474e9c64aa0d03d2da8486832ee59c26272e3e4517964dcb334ec8309d5dce6f672cd7cb4d1dfe23a0b1662f2a2126d655abcb11005d547cd84db87f1874035b2be896fcb10dac200685494586b40f77bfbc3f6fa1aa1e6d74f2bc3f0c1ad87588a69cfcd52c68bc3058744f79a791f3ddfd7d231cf2a8292e4787a4b1cd8138140b8190a51d27f0e604923d5779cd79a0e48a0eac76b303b51523f8f38f945867f3a4ec4e1ef197deed9172f0395761e3dbbe49462e7dbe56f6964ed0c6f7cd26d920138e2dae5eb7c3cde467402c23937609b609ae7d58b5a406177109a32777ae384fd62975ed677313915843557a0129f6c075201ce4921930d770ab8c57d3e87d48b42614eed9de5c1251793784bf9eb5b547a9a08435ef9fcaf109799ff84100721600ed6cac1e8cc74b6dc3f00f813b67fefb8ecc42d11ce6b5a149a44548e2cde01e13cbd2c684c2a1638ae5a6713bf1dfa52d31cc0d944d7768662e296dcad62e2314a38e3f8b728b8ca067751ebe7b8b64610e0d1aca2f5493f0e9b9b5e2f99c1971f27891e9a734bc8606d28f31a9878a0973c50d65fcaa7df1de53568538232caee0b84a22415e6e8bd6bd40d4980de89120e4f4c319af9eab1c75d84d59d1080b8dc7bc1109b8bb124b6ca7c92d3049d3572dbc47b860bf6838d0e0e9eb2417d4bdd49bd6cf79c49d8f0faaef90151f6065e5a4249a4961446a029fd3aca30b825ad17f2cac2b9d90fedb532853070f8e227e2c29df09f961b1d323aada9410e71d245af0c24e47ef2f8056ab50e1b28b65eee25314f8d126882811ec49b4247f8a94d6a02d6ac6c8dc189057c6a7ca0d11c627e7d380ececbfc6b8f5895b0e9e851f9c6c9fc00a8516fdeefc6317ead90b78f40404c45335f07701c9f089246433b0f08f60c08a949432b443fb55d88879c54aa8385a0fa6a7042fa380a51c26bec4cc68f26d190ca24efe73dc0b3204fffa3eeca2c14fbab4230dfc80ad021b9e8c113eb417ba22469ba46f1bd328ebba08144b4d6c79b0f5995787cfaa052c22344c552863bdc45d639393088ff16af3a12945374a9b5b82bd0e5caefb";

        bytes32[] memory inputs = new bytes32[](4);

        // msg
        inputs[0] = bytes32(0x000000000000000000000000000000003d2fc8e85afd38a3b23610fae5cbcbf4);
        inputs[1] = bytes32(0x0000000000000000000000000000000024ab7ba5c4b5df37241e921e4b2fb164);

        // root
        inputs[2] = bytes32(0x00000000000000000000000000000000ad19f07c487a8497b6e4f1e9296c3634);
        inputs[3] = bytes32(0x0000000000000000000000000000000048a3f47bf8d72c875d822fc36d306d4f);

        require(kusama.verify(proof, inputs), "Plonk: Invalid Proof");
    }

    function testPolkadotVerifier() public view {
        bytes memory proof =
            hex"09b1f7e9c301ea3d9aee6ddd48aac49756a1146c3789ca6c924f044d9ee5623c29ae509a49ef6ce5f2508bab699940b0a542b57f60e170ee3f33d07dd01d9627085c2784def375ccf0ab6d9544ba21ce7e952ef11fc796e7fd4d11a1e2ef26b229073c4f38ce5011725ed0af7b74c7666800a3fc32ace16bc60fdee066203ada04752972dabcb6fa8ce5eeca81d852f12305ee38ab5e837c13ad0e8147d9172a2cc841d40283cd7fecb1b4fad34fa5d0f6eb5ca247101e94cc15ab5f0aeff8760e86b05720b4f80de96766bf11f13197ac9253bc889619460e4f496f768b172a1a152d99540a86ffb4d06748872e31970df16a104716803872bb13963ba080d22ed69ab12dcf5370f7d6722d5c947fe1bb8856f89bda9329cbfc1afad0b1dca42a6206f93c18ebc66540c706d83ec1b4fd6e4512cf62826d017d043c0cfa31c706b036d9526cfe2c4da6c90e88e859793f9cc482ca5efdf3134bb37ed39140e62126494714ff17fa60781de9903b72062f6939edf14883699f1bc329bdd2b2ae29d2fb89c7598b1134f425f163c2617ef70181aafac0265d23558dedd153c3fa01d25ff29a5454a882ff29e53118f595483d0f331e4c1bc998093a645dfa12541c728b33955f0111f0dc8b3ca0b506c26847b129a7a1838f937b226231b70cc3164b0b38a7778cb55fd2172f61bc864c7631cfc6f06e92cab4babfd835d1d8ac1708fa6a420a6325e782f70ef1563d76622ca7c92498881ee12a86692958a4de18fa769a3b1607e37806fc5e5521ab800f3424bd0db2ec3c5f9f6c66f4d0e2590b3738985eda4bf7458cc30aeb61541f81f6bb4a632994125dbb174d3b66dd842763aeebd3c19358f26d0c2002aa72a8879fe2f726040325ea335323b32cba7c2603cefced735d9575104c3f67d05dd43736af2c595b7e57d690fc75338e69c823a2a582e821438994f6ebea8a6365e269ea29d561ae4bed422e5704398c50f9153134ea6455d34062728bd0e42c12708e2fbf4c01b7f294becf03f28c3f20ef13acda74cc17fbb88480a7cfbd5100eed85d594055f522e38a3e2a6f8e67515624906a0de336de997e0e58591bd5a98c841eadc23a191bb1fc4880de5dd4f04709cf91b73f3d854d783fe75483b68c08d3bb102af4a28f458e4e660f9a9fbaaf0fc076f81de808ed4b73e938be0fb328e8d59728316300579c7ea0889af9052e239e1e5926a44df65ffb79c5adb2e438861759bc408dc153c4ff57037dd814600074428e2640cc0390482fc9627f0c8b11a22491780b0846b446c221d8f5bf651453d8e90af719344e14cc40e143c820f6acbc72e529c52427e0d681c1385bf4004d44dcf0a0d8cad54b5051fbf7dbe78bc7787e307d94ab6321e5294c5021a119cc423fbd0b6e2f71899fffb1c0e1ce6b618fd5cdc5ca5602aae185a436b91f1d6370a33dbd9a795269c01814476e2bf211194d82c3c4e79cabd8e78805ae4c1e94ae2eb6b031f98d8e3e65afb5852261bde5588e90f06ea156c8143305e8262cd9b1c8461c166f7e94152e174064ec5ebd520c3b4fcd6aac0bda5eb2140a971e2eac18ce9315202bf8d8de31e3021245e2ffa54967f0922ac02aa3de55a04f14031c368cf84b8e6f5eedd99fe15fe062750444c627a247ef05799655e22bb119adda485249f6dd0271d0fb7ec2b8437caa0d06a76afe7be8f7f0c16a0316b32756f1cff0ef4ab04f86b521cb4b70f1ebb96ca6984cdebf9fa6b62d0736218e188b725fd3ecc2201aff936edc52a759efbcc518c13e0afc17a5816987d54c6d0c9f0820c4843a8c9391a6db629c8634aaad067c3f4dee82391bd2b4f5fbb12c1a66952128e18ca3882bbdd33647f6ac40d6140ff88f255b2e6a3eb1f65bc48c2128b14737c6922541351fa6ac910310483ded18b9a49f0051bfbd2f68dfc09f02aea139b6389e0191413eda2c263802d3edcbab8a67011941f6da08703669c5021cc9093d974bca7cb8c506fbdee591ac8d87d47c65796b3a0640daf944038a041d958fb09d8a5b7479e167b3ae7cf152d45065839be5d0ea4edec576ae66a319e7bd884f440d1c8e5fea24934bfcb4c0b9313c0aa7429dced95003cd76948514bcd7db7eabe9272ad9d47be205c4258fd60e3c84ea97fe0c846c68ee892fbf1ad498516d5dca947e3dc5ddb3fea85162e6b21acccd5eae0e0346e28e806ac319f7f922ef9be06b583dbb311738a689b478ef621f351a2ae479c8b698bb0e5f226555abfc9b6bec70cc9195e544533a5037710a09010bfa5ee8ea509bf3757619865b0a92e59ba193b6d3da853cb367a28bd83d498ba0bd8c82303acbf1fc8109ded2578b2993ce6c634ef4032007ac6e1bd1116c7db0e59f8a384bc12093312da9197a4009f1249a7d5938fe6386e5e6092503b85ea959fcce65ec4b3343941e3a9e72dd6ee14a5962ec1fd95244ff27295e0e62691290799a3c6e922662ed2465f3c2d5418a8d2a708dcd99ed631495d5027b17e0495c35cedd9433ba4d0e1bc28713f50b01676a68c5f8cd243078966bf84aabd5ccbb500a78932185aa0006bc775e6245c550a371ec0b1681bb3cc79ea2ea5de36b55ea4a35a4942ceb4526ee5a673692936320334ef23c7f6be86c7020be591e13fa8f5ab8ca176038ef3001c30751023bba1a0b658203851d84187e2aecdfe3dc33d5b8168ce732fff62246817facfa0caba8cc71905ed3590250c903a6de5b299b0214ceb1c8970984281f49a5d7578a83cd45f1c82fbe06b04d1661bea9b6170162e9f6963e9d480b26031aa8ddb594545b09304987192958691835d1298eb18fa46f3feabd88c6bb1c530c1f1fff89b110f01fbefe8f217d5ea5264a2ff17913a685a04f7a315ae60c7ecdca6cfdbbe7b60598b7a5517af3e3ea81f9c0dd4dbdb23bd321eac0d03a02823ed7dd2f449a0b096e9b031496f373f1e861088a2dedbf7835708192fa150e8ea818c474d4d94aa9a8f618b030d14505ff0e86ade8ad50dc40b8f79b8909";

        bytes32[] memory inputs = new bytes32[](4);

        // msg
        inputs[0] = bytes32(0x00000000000000000000000000000000232349c992ac70f35f0b1c8bce9757aa);
        inputs[1] = bytes32(0x00000000000000000000000000000000f94eed6d65dbbeb804885eede3da5404);

        // root
        inputs[2] = bytes32(0x00000000000000000000000000000000f44b9bb5380950104c979e61da7a7930);
        inputs[3] = bytes32(0x0000000000000000000000000000000029ca7d8f5229bf990a1f9bbe97fbf01e);

        require(polkadot.verify(proof, inputs), "Plonk: Invalid Proof");
    }

    function testRococoVerifier() public view {
        bytes memory proof =
            hex"10ae884942b1964571688fca692a9ea03aeadc986e5aa3f91eb59cde45280a9d23a8797ed43383891b988647b4de7532ca817b2347cd079f3aaac88697a3dfeb14b39c4b7ae6307a921c6cd9b3c52585cb258df9b7424a37e6e7accf16d2359d12055476a4bdb88d2b396e0689fc48d74aef606a0ca4893649c8fcecbc855330049ba21bd3822cee4c88145794e1e7fe7f4675675f40b5dc0792cdb750ab77b31319afcfb1751c285c413202ce54896374646062f7bd54d7c198a31499d00806221b5e9234959c9491774805c3a60809260f837564bb9ab3a20f19b2c819a4f71c396504ded562bda72627e44ce990c5f76ca51b2f51a424c607c82b2fd156b60ebaf4de9484bb45f04488fec541cab12d5f5aea16876822b4ff0797bc1991a00c7e9dd0cea18f128fa8575d9575259281d24c2119c9f91c41a38045374f300a0a68847c3c104b80ed0071f1957e0173c79c7b32fea8ab2b4c47ad4e520253e7245807ccc817d93029c3cd30e57d09a9bd5e651c994844218e482baa7417a35826e063a37f0e1b3536e384956dd1d73f6bd7d044708962977f77f886af7cca7a1a526e107848d484b50fd358dbe4098660e84adc317b86aec941ef7ad901a32d1a01e4e328022b6e37aaa428e58e87ec221deac4bb814303c8ceed4b0ce844e914053f820ec8c027fc11f687ee3adf02c1716b07104e98a28b7cd4bf8d961e620143f57cb801e83bbe4f1e6b559ed720210e5772169ae4b8ecd51c13a8e763da0bfba0335b7c7f57d0cef4dcca76f66d7203aa54e10a4736849c835193ae075723fa2bc26cb273dab6537f672fa705af538977ea08ff6ba1dfc492d0639e5ff604735d5aac329924d3bf6b19ad8901ab4a8b8090218d113dd451c35b5ebeb0d12eb344305e21dc195170a1d31ca36dad41f009a86f8b62f402c162f8db0986512dd937da8f3da699ad044c684cae2babf517bf3ffba7a71ee3ea79103fa87ebd06597274acac63df25d087bb8a2414ada5454fb77a847cb37acbc7a22557ab6e17a836e13c727b6ae07b892d607e85c574b79d4e07a0b6e9fa9b9be00ee1d6762008f13f20c75227fc546e15fead0747a0ef03c37e6605c1351798520f5337012db8dc7e7083149c91ecec2e32169acdac2abe338d9f70a0d77f21a933b848b2246cca63cac82515a5300c11585411a4a8d737112d7b3d539a1278d5cca976c60cfbb4de178d28e6ee6c6a514f0dfa315ed02866431f8543b117613fd542328725e4d6747abf0207361ac75b5df0d18e43d9b61f209f100b7670337070e6c9b208a630b20a6963ff9fd6043de8fc11c0c4e2d4860fc34215c49db1e033c9dc761ae7b93541ce6eacd88d3493fef19043282c0b097f975a2b14734760e62fe897104583d01e616500a37551bdd51ee22f322cd81a0338f67eef84f5cc96c668352cdfba05670841feb18d32ae99a592433c4852aa63176d3f54fc5bf28368d4a5250e810c278d83b667f993c91a0ca7dadc364ddfbb098e5e24ffdfa1c5812bb60160054c63601afa2cdb416c4a76b73e81c45f4a723c5b0a72be724c97095f3d232031aca236338cce7270600db7c512abc3ba6b02b9598a20a37f4555e85e1316a011c7bc5e798fdff73b7a837b42be24be13973021831309cd6a4059fe18d50ed538fedd6530ca3090d1e347907d323455cc4bed8913a9950e395f15f6451a0348faaf08c83eff084e0a5eee8c807381dd3a5669ce13c5ff58217d821c0d362c01cdd8e250f1da61c1b3780e8beddab5522d4a4d68e439a7f71c6cd199118f1f9e581073236cfb4c35fc0ee11f994ca406811f4d58bd768a6896a6e448374f18ca309fd891dbc42b0506fdf348c00df3d236678ea3c4427a71d4f27475fa701ab2641fc9fa10e5651262ac24b6080a5c361b0370fa331fa507beacc3b77486076c95ae09b3cc0f26f3e60fec0c09c4c5cc84b2b71f5f3fa2295e16e5523ae708880cf530705f9abfe5633e6d74ed37dd606bb353441f6003f03df7842cf7a20b90b044d69e1fa3ac3a5a7aa3e2429434e3fa4aba4dd3fe129b9aad10643425212e438c84b3f3e6a890965cd75b9b01bb10d986e1554a8cb7b9ed68189500251009091f5a35b0fffb2190ecb28bff55ef8f152714b357c0a37ab6a48021453204d0af20e10d1c556d9fe4a2f894e4e9caec338ec6b18e44e18ebec9ccfe88c72b8b95b7c0d5f58e1e7ed46cc77e3eb2fb7e0f257f379af580c17e0527a42fd3258d9104ff8fa9ca7f23c855c8ea50199d4b1a4aaeda241ecac7ec63a778c3ce13e0c4baa4d9ec226ba2b31d9074d20e145668c1e19bcdea57c39d7a8ed3263b26ab80cf1b13306cdaab7305afa27baa57508fef4ccfa92769ced7e6f102f7c405fdb4e5fc3eed8a7d3cbb95381995021ba7fdff99b613e62b2331688f76aedf03ba9069856ace6826bc512cbe88c3221fc24aaaa779b8869624ea73ed9e5dad239cbd590bb5ee91a08762ad8593273eec5c1cbb593eb85a27d9f342ebd05b5f2a86fb0e023e93d4708b189e99e10ee861e3e541017ee1c35e3601f46a8ae7d20ae8be1bf51fcefe251c10db16fc9b10fe6721020af4e0eeb025d4dde3f817b41ac467def27070425000aa5d002f465b84cf599edff07b71cc63d44165fda1ff0d4ba98c5e5af3690ecf80fa73f55d1d4d7671627a913acd20b2c9446a80274f2eeee016598caa51127945084e7557e56621f2ce45042be9beaa20b719190ffd125c0d2e02966a9fbb5e256b6c8e3014c1cb9f72667245f96ce2a543d7909d392d96af946a5d590a22ff2441013dd11ddb9df8067efdc75321456619a2dd221c0b61111e6b08a74cbdedf8502cc0d0d9a2b15ccade1eff2afb69b6a187a6a83c222dc266b8bcaa4f9a9d1a5b5ad4e87c9df44923cede9b6b1c525a381964d0f000be0169e33d39caa34f0c60198ed03f0f97b266dc3457df315cc1f9552b60cf203ff8e67c024183caed253209cb00e88e7768e004dd5ba0225b6459c6139ecb";

        bytes32[] memory inputs = new bytes32[](4);

        // msg
        inputs[0] = bytes32(0x00000000000000000000000000000000232349c992ac70f35f0b1c8bce9757aa);
        inputs[1] = bytes32(0x00000000000000000000000000000000f94eed6d65dbbeb804885eede3da5404);

        // root
        inputs[2] = bytes32(0x00000000000000000000000000000000cb96da10dffbbe4a27cd312a9db9503e);
        inputs[3] = bytes32(0x00000000000000000000000000000000cb086e2e90312d3d8793e5bf4bec5a77);

        require(rococo.verify(proof, inputs), "Plonk: Invalid Proof");
    }
}

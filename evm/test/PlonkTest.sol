// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.17;


import "forge-std/Test.sol";
import {PlonkVerifier} from "../src/beefy/PlonkVerifier.sol";
import {ZkBeefyV1} from "../src/beefy/ZkBeefy.sol";

contract PlonkTest is Test {
    PlonkVerifier internal plonk;

    function setUp() public virtual {
        plonk = new PlonkVerifier();
    }

    function testPlonkVerifier() public view {
        bytes memory proof =
                    hex"1df9452144aa7b7d66c55bae5bd5eab85ee066acabbd4d2c8b0827188407aa0527d806c08671968e4462a856e6aa668ae3d945419c49dc113534c47e4284fd8e206b54ac92c850ad33d3000417827da20b53c7d74d506ad3ece5cf752a69cc4b029511fdf73fdcc45e13821abb8d74da38a5e55ce52eeb781958109cb5042b50212d66680e7f0da498967c3e0d87ae6ec3b9efa1993c05ed3986b98a5b93ad6f07a59886044c1a82b7a220e0f99f965a10afabe60e3464416e580ba3d2ec18e61bdf48f16665ca9db54254554abe9b896943d630f46adf2fa9ffebaa023708e827584edcdb771402e92b18c6590363dca7fd1763aedf0c694b66cc700742cb1e1389fb2fe05cf0b670ce5712cb644d8e3098d2cd3ee5d6e014efd08c63b0db120c24a785a773b50ea9bd21511863df16efb2201e5e3db55c5493bc3746767e822a61d67f17c4b758bdeeb3bde4b384dfb890b5ab8e019de21c51f3f2816f18501ea53254fe46428d493a83f78eb350f7c838eaff870e79567dfa7ccd7f47d4602f0d9770c520576030b69a7d64d6f4fe2a47b34f5eadf349b201e21fe5718dd20287e4185990dc46b7378124a4336c1cc3eb80eef7bada17f72d744e44d838410c94fc09a3f69d7ccd3404ef352c15fb4e9e9975de20677f6fb9df9dcfc939bc1e816c7cc1c62f804c73cbe42f6bc2551dd4aa31a44d895a4aa33bdc199fe2f7057c2a9884f8490e04582f39529d618ac7e6bcbdebd8173c0ae286fdeadbbbb81dfe6ad80e3fb25848790697a46eec429732c10c54e1ab00fcffdb6768e69c6825440e19e51d791737a8bfaeb81738eece3e7d316859d9b4020792e0a77a206011263430e1f286bd25edd470b17a846fe55ad538624ed8dd5e1e7eb64157722e1cd75a7c8f2a5792293ed7dca487abc69ffd3b1e2c54fab76827a342be69491f063d704aa84ec3f869c54e85a95bd4e3b1a5c750256a32bc944383c8278ae7cc11401a7ad8dc603e6f032dd3296f5680cfe893cd55d1ea38928d781dd5dbac9c2d1577d9516c08ade4a876b5548e7db28546ab0c572ab43040ba6ee37e950d57148a872d8048e403a62ab3f490958ab34bfdef04486e17d8aa36e533218ebde303834d81ec1a8a148d7a28d5326c2d55a79752068d91914b72bf6a8c79d755b70a4686c06f4f5c9b221035070815f3184964374bffb0db1e42d15c0d4b9e397003ae19a010f9407166adb046208620a7c4ab3170356331f024f7fec9b1aa742d29a492f6697489b5b103fb047543bcab1f9d07f3176f1a08d6c075239117e4740801859151972d764e76d8857439b79e8198a5a177eaab243c5cefa402ca6ff51dafa15898b80a69b46bfdca8d9be5cd7c62637c3b9e0f1ae27976eb0e1475d31e2417d56c50b78815c56b1e6f8f47c601722e167cfbc13a7064128d624ad9891cd6fae2f4a958e8b882e0597ed11290229cfc38bd36d44de76d9edada6331a90e2b192492448b014b5842e33cf4a67c76defeffe57cfacb27a443979ace513405a5fd41d1683c98fef0a8274f10c9990e79e5ffe19316e3341c2b1310dfa3b121de8b32cc89a65dd968bfdf94c85783d55756934d92b55ac1413bc0e5d7f94220a98ff92da395460b868274bf87910e507f7ebc02fc615379ae4c6c4e0455ac08d596e12a44d5e86b99c8419f77944c406befbd7296d882f4a93af35b7030262a6556d55bef040ca123279e7fd0963d636f48a0d47fe814db3b84f919b261a41b1d61bcd284f62994a70ef950cdf74a73abb70e76b59d9aec569a09e4b46bb20a5e34d45f105277d0260e21884f98af40d9da0d1d9a3220719e60095fc83e83113e9fd549a576807cb93ea04bf9072f077c7d88b076d4dc9f0f5aaed54a5b930a63ea9d771ec2fb2aea2f95ffba37df5ba9b4be9b983d182306d4474e9c64aa0d03d2da8486832ee59c26272e3e4517964dcb334ec8309d5dce6f672cd7cb4d1dfe23a0b1662f2a2126d655abcb11005d547cd84db87f1874035b2be896fcb10dac200685494586b40f77bfbc3f6fa1aa1e6d74f2bc3f0c1ad87588a69cfcd52c68bc3058744f79a791f3ddfd7d231cf2a8292e4787a4b1cd8138140b8190a51d27f0e604923d5779cd79a0e48a0eac76b303b51523f8f38f945867f3a4ec4e1ef197deed9172f0395761e3dbbe49462e7dbe56f6964ed0c6f7cd26d920138e2dae5eb7c3cde467402c23937609b609ae7d58b5a406177109a32777ae384fd62975ed677313915843557a0129f6c075201ce4921930d770ab8c57d3e87d48b42614eed9de5c1251793784bf9eb5b547a9a08435ef9fcaf109799ff84100721600ed6cac1e8cc74b6dc3f00f813b67fefb8ecc42d11ce6b5a149a44548e2cde01e13cbd2c684c2a1638ae5a6713bf1dfa52d31cc0d944d7768662e296dcad62e2314a38e3f8b728b8ca067751ebe7b8b64610e0d1aca2f5493f0e9b9b5e2f99c1971f27891e9a734bc8606d28f31a9878a0973c50d65fcaa7df1de53568538232caee0b84a22415e6e8bd6bd40d4980de89120e4f4c319af9eab1c75d84d59d1080b8dc7bc1109b8bb124b6ca7c92d3049d3572dbc47b860bf6838d0e0e9eb2417d4bdd49bd6cf79c49d8f0faaef90151f6065e5a4249a4961446a029fd3aca30b825ad17f2cac2b9d90fedb532853070f8e227e2c29df09f961b1d323aada9410e71d245af0c24e47ef2f8056ab50e1b28b65eee25314f8d126882811ec49b4247f8a94d6a02d6ac6c8dc189057c6a7ca0d11c627e7d380ececbfc6b8f5895b0e9e851f9c6c9fc00a8516fdeefc6317ead90b78f40404c45335f07701c9f089246433b0f08f60c08a949432b443fb55d88879c54aa8385a0fa6a7042fa380a51c26bec4cc68f26d190ca24efe73dc0b3204fffa3eeca2c14fbab4230dfc80ad021b9e8c113eb417ba22469ba46f1bd328ebba08144b4d6c79b0f5995787cfaa052c22344c552863bdc45d639393088ff16af3a12945374a9b5b82bd0e5caefb";

        bytes32[] memory inputs = new bytes32[](4);

        // msg
        inputs[0] = bytes32(0x000000000000000000000000000000003d2fc8e85afd38a3b23610fae5cbcbf4);
        inputs[1] = bytes32(0x0000000000000000000000000000000024ab7ba5c4b5df37241e921e4b2fb164);

        // root
        inputs[2] = bytes32(0x00000000000000000000000000000000ad19f07c487a8497b6e4f1e9296c3634);
        inputs[3] = bytes32(0x0000000000000000000000000000000048a3f47bf8d72c875d822fc36d306d4f);

        require(plonk.verify(proof, inputs), "Plonk: Invalid Proof");
    }
}
// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.17;

import "forge-std/Test.sol";

import {ZkBeefyV1, BeefyConsensusState} from "../src/consensus/ZkBeefy.sol";
import {RococoVerifier} from "../src/consensus/verifiers/RococoVerifier.sol";

contract BeefyConsensusClientTest is Test {
    ZkBeefyV1 internal beefy;

    function setUp() public virtual {
        RococoVerifier verifier = new RococoVerifier();
        beefy = new ZkBeefyV1(2000, verifier);
    }

    function testBeefyProof() public view {
        bytes memory proof =
            hex"";
        bytes memory state =
            hex"00000000000000000000000000000000000000000000000000000000008752da00000000000000000000000000000000000000000000000000000000003a0b7c0000000000000000000000000000000000000000000000000000000000003b51000000000000000000000000000000000000000000000000000000000000006eab34ddb838b4f3f271d56c3fc2678c88cd735d9946ba100cb91ee698a53b44d30000000000000000000000000000000000000000000000000000000000003b52000000000000000000000000000000000000000000000000000000000000006eab34ddb838b4f3f271d56c3fc2678c88cd735d9946ba100cb91ee698a53b44d3";

        beefy.verifyConsensus(state, proof);
    }
}
